image: Visual Studio 2015
configuration: Release
platform: x64
clone_depth: 1

environment:

  PGUSER: postgres
  PGPASSWORD: Password12!

  matrix:

#   - pg: master
#     PlatformToolset: v141
#     configuration: Debug
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
#     rversion: 4.2.3
# 
#   - pg: REL_16_RC1
#     PlatformToolset: v143
#     configuration: Debug
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
#     rversion: 4.2.3
# 
#   - pg: 15.4-1
#     PlatformToolset: v143
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
#     rversion: 4.2.3
# 
#   - pg: 14.9-1
#     PlatformToolset: v143
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
#     rversion: 4.2.3
# 
#   - pg: 13.12-1
#     PlatformToolset: v143
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
#     rversion: 4.2.3
# 
#   - pg: 12.16-1
#     PlatformToolset: v143
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
#     rversion: 4.2.3
# 
#   - pg: REL_11_21 # verify can compile pgsql.sln on msvc 2017
#     PlatformToolset: v140
#     configuration: Debug
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
#     rversion: 4.2.3
# 
#   - pg: 11.21-1
#     PlatformToolset: v140
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
#     rversion: 4.2.3
# 
#   # msvc - "pg" 10     - last version "pg" supports x86
#   # msvc - "r"   4.1.3 - last version "r"  supports x86

  - pg: REL_10_23 # verify can compile pgsql.sln on msvc 2015
    PlatformToolset: v120
    Platform: x86
    Configuration: Debug
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    rversion: 4.1.3

#   - pg: 10.23-1
#     PlatformToolset: v120
#     Platform: x86
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
#     rversion: 4.1.3

matrix:
  allow_failures:
    - pg: master

init: 
- echo compiler msvc init
- systeminfo
# https://stackoverflow.com/questions/5089389/how-can-i-check-what-version-edition-of-visual-studio-is-installed-programmatica
- if not "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2015" "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property productId
- if not "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2015" "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property catalog_productLineVersion
- if     "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2015" echo APPVEYOR_BUILD_WORKER_IMAGE is 2015
- ps: |
    ${env:msvcversion} = "2015"
    ${env:msvcproductid} = "unknown"
    if (Test-Path "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe") {
      ${env:msvcversion}   = $(& "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property catalog_productLineVersion)
      ${env:msvcproductid} = $(& "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property productId)
    }
    if([int]"${env:msvcversion}" -ge 2019) {
      ${env:msvc_age} = "2019_or_younger"
    } else {
      ${env:msvc_age} = "2017_or_older"
    }

# Make %x64% available for caching
- ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
# a variable used in the Appveyor cache area must be defined in the init
- ps: |
    if ("$env:Platform" -eq "x64") {
      $env:pf = "$env:ProgramFiles"
      $env:x64 = "-x64"
    } else {
      $env:pf = "${env:ProgramFiles(x86)}"
    }
    $env:exe = "postgresql-$env:pg-windows$env:x64.exe"
    [Environment]::SetEnvironmentVariable("exe", $env:exe, "Machine")

    if ("${env:Platform}" -eq "x64") {
      ${env:bit} = "64"
    } else {
      ${env:bit} = "32"
    }
    ${env:betterperl} = "strawberry${env:bit}"
    ${env:betterperlurl} = "https://strawberryperl.com/download/5.32.1.1/strawberry-perl-5.32.1.1-${env:bit}bit-portable.zip"

- set exe=postgresql-%pg%-windows%x64%.exe
- setx /m exe %exe%

install:
- if not exist R-%rversion%-win.exe appveyor downloadfile https://cran.r-project.org/bin/windows/base/old/%rversion%/R-%rversion%-win.exe
- R-%rversion%-win.exe /VERYSILENT
# We could have used RTools many R users have, but let's use msys64 existing on Appveyor intead
#- if not exist Rtools35.exe appveyor downloadfile https://cran.r-project.org/bin/windows/Rtools/Rtools35.exe
#- Rtools35.exe /VERYSILENT
- Set mingw=C:\msys64\mingw
#
# From the EnterpriseDB version name,
# if any, strip off the: right-most part dot, then numbers, then one hyphen, then numbers.
- ps: $env:pgversion = $env:pg -replace "[.]\d+-\d+$", ""
#
- echo pgversion=%pgversion%
- set pgroot=%pf%\PostgreSQL\%pgversion%
- echo %pgroot%
- SET R_HOME=%ProgramFiles%\R\R-%rversion%
- set RBIN=%PLATFORM:x86=i386%
- SET sed=C:\msys64\usr\bin\sed

# Appveyor specific: seems not required - with Appveyor - Strawberry perl is already in the path
# ActiveState Perl is good, but Strawberry Perl is preferred
#
- ps: |
    # Set-PSDebug -Trace 2
    if (-not (Test-Path "${env:betterperl}.zip")) {
      curl -o "${env:betterperl}.zip" -v "${env:betterperlurl}"
    }
    7z x    "${env:betterperl}.zip" "-oc:\${env:betterperl}"
    # of needed to install pl/perl
    ${env:PATH} = "c:\${env:betterperl}\perl\bin;${env:PATH}"
    which perl
    ${env:PATH} = "${env:PATH};c:\${env:betterperl}\c\bin"
    which pexports


# R in the path is not required: msvc compilation
# R in the path is required: find Rscript
- set PATH=%R_HOME%\bin\%rbin%;%PATH%
# environment variable "postgresrcroot" is required for msvc.diff.R
- set postgresrcroot=C:\projects\postgresql

- ps: |
    # "branchtagcommit" exists only because, this makes an easier test in a windows batch
    # This environment variable is use in a test that is used that is used in determining
    # whether or not to perform patching (see below).
    #
    if ("${env:pg}" -notmatch "[.]") {
      ${env:branchtagcommit} = "yes"
    } else {
      ${env:branchtagcommit} = "no"
    }
    echo "branchtagcommit ${env:branchtagcommit}"

#
# PostgreSQL from source code: git, tag, or commit
#
- ps: |
    # Set-PSDebug -Trace 2
    # notmatch - if no "dot is found" in pg name, then pg is a: git: branch, tag, or commit.
    if ("${env:pg}" -notmatch "[.]") {
      git config --global advice.detachedHead false
      $env:PATH += ";C:\msys64\usr\bin;C:\msys64\mingw64\bin;C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\amd64"
      #
      # git branch or commit - alphanumeric and all lowercase letters (slower download)
      #
      if(("${env:pg}" -cmatch  "^[a-z0-9]+$") -and ("${env:pghint}" -eq "commit")) {
        git clone -q                            https://git.postgresql.org/git/postgresql.git c:\projects\postgresql
        pwd
        pushd c:\projects\postgresql
        pwd
        git checkout -q                 ${env:pg} -b ${env:pg}
        git branch
        echo ${env:pg}
        popd
        pwd
      #
      # git branch or tag(detached head)
      # PostgreSQL case - git branches and tags have at least one capital letter - but expect mostly CAPS
      #
      } else {
        git clone -q --depth 1 --branch ${env:pg} https://git.postgresql.org/git/postgresql.git c:\projects\postgresql
        pushd c:\projects\postgresql
        pwd
        git branch
        echo ${env:pg}
        popd
        pwd
      }
      pushd c:\projects\postgresql
      pwd
      echo "Files . . ."
      $Table = Get-ChildItem
      foreach ($Row in $Table) { $Row.Name }
      popd
    }

#
# PostgreSQL from source code: git, tag, or commit
#
# dynamically patch, so that a separate msvc.diff file does not have to be used
#
# Required "postgresrcroot" for msvc.diff.R and Solution.pm.R
- set postgresrcroot=C:\projects\postgresql
#
- if "%branchtagcommit%"=="yes" (
      echo Begin performing patching on-the-fly &
      pushd "C:\projects\postgresql" &
      copy "src\tools\msvc\Mkvcbuild.pm" "src\tools\msvc\Mkvcbuild.pm.old" &
      copy "src\tools\msvc\vcregress.pl" "src\tools\msvc\vcregress.pl.old" &
      popd &
      echo Begin patching &
      echo "%R_HOME%\bin\%rbin%\Rscript.exe" --vanilla %APPVEYOR_BUILD_FOLDER%\msvc.diff.R &
           "%R_HOME%\bin\%rbin%\Rscript.exe" --vanilla %APPVEYOR_BUILD_FOLDER%\msvc.diff.R &
      echo End patching &
      pushd "C:\projects\postgresql" &
      git diff --no-index "src/tools/msvc/Mkvcbuild.pm.old" "src/tools/msvc/Mkvcbuild.pm" --output=%APPVEYOR_BUILD_FOLDER%\Mkvcbuild.pm.diff &
      sed -i "s/Mkvcbuild.pm.old/Mkvcbuild.pm/g" %APPVEYOR_BUILD_FOLDER%\Mkvcbuild.pm.diff &
      git diff --no-index "src/tools/msvc/vcregress.pl.old" "src/tools/msvc/vcregress.pl" --output=%APPVEYOR_BUILD_FOLDER%\vcregress.pl.diff &
      sed -i "s/vcregress.pl.old/vcregress.pl/g" %APPVEYOR_BUILD_FOLDER%\vcregress.pl.diff &
      popd &
      type %APPVEYOR_BUILD_FOLDER%\Mkvcbuild.pm.diff %APPVEYOR_BUILD_FOLDER%\vcregress.pl.diff > %APPVEYOR_BUILD_FOLDER%\msvc.diff &
      echo **** Begin Display %APPVEYOR_BUILD_FOLDER%\msvc.diff **** &
           type          %APPVEYOR_BUILD_FOLDER%\msvc.diff &
      echo **** End   Display %APPVEYOR_BUILD_FOLDER%\msvc.diff **** &
      echo Begin display of Mkvcbuild.pm &
      type c:\projects\postgresql\src\tools\msvc\Mkvcbuild.pm &
      echo End display of Mkvcbuild.pm &
      echo Begin display of vcregress.pl &
      type c:\projects\postgresql\src\tools\msvc\vcregress.pl &
      echo End display of vcregress.pl &
      echo End performing patching on-the-fly
  )


#
# PostgreSQL from source code: git, tag, or commit
#
# Microsoft Visual Studio specific: "cl /?" or "cl /help" can not be ran.
# "cl" is interpreted as an Appveyor specific alias to the Windows command "call"
# so PostgreSQL, can not correctly determing the platform.
#
# Trying to override the phantom alias executable "cl" - Microsoft "call"
# https://help.appveyor.com/discussions/problems/29255-trying-to-override-the-phantom-alias-executable-cl-microsoft-call
#
# force x86 to have the CPlatform: Win32
# force x64 to have the CPlatform: x64
#
- if "%branchtagcommit%"=="yes" (
    echo Begin performing patching on-the-fly &
    echo Begin patching
  )
- if "%branchtagcommit%"=="yes" if "%Platform%"=="x86" (
      echo "%R_HOME%\bin\%rbin%\Rscript.exe" --vanilla %APPVEYOR_BUILD_FOLDER%\Solution.pm.R Win32 &
           "%R_HOME%\bin\%rbin%\Rscript.exe" --vanilla %APPVEYOR_BUILD_FOLDER%\Solution.pm.R Win32
  )
- if "%branchtagcommit%"=="yes" if "%Platform%"=="x64" (
      echo "%R_HOME%\bin\%rbin%\Rscript.exe" --vanilla %APPVEYOR_BUILD_FOLDER%\Solution.pm.R x64 &
           "%R_HOME%\bin\%rbin%\Rscript.exe" --vanilla %APPVEYOR_BUILD_FOLDER%\Solution.pm.R x64
  )
- if "%branchtagcommit%"=="yes" (
    echo End patching &
    echo Begin display of Solution.pm &
    type c:\projects\postgresql\src\tools\msvc\Solution.pm &
    echo End display of Solution.pm &
    echo End performing patching on-the-fly
  )

#
# PostgreSQL from source code: git, tag, or commit
#
- ps: |
    # Set-PSDebug -Trace 2
    if ("$env:pg" -notmatch "[.]") {
      gendef - "$env:R_HOME\bin\$env:rbin\R.dll" > "R$env:Platform.def" 2> $null
      lib "/def:R$env:Platform.def" "/out:R$env:Platform.lib" "/MACHINE:$env:Platform"
      pwd
      echo "Files . . ."
      $Table = Get-ChildItem
      foreach ($Row in $Table) { $Row.Name }
      pushd c:\projects\postgresql
      pwd
      echo "Files . . ."
      $Table = Get-ChildItem
      foreach ($Row in $Table) { $Row.Name }
      cmd /c mklink /J contrib\plr $env:APPVEYOR_BUILD_FOLDER
      #
      # patch already done - above - using msvc.diff.R
      # patch -p1 -i "$env:APPVEYOR_BUILD_FOLDER\msvc.diff"
      #
      # creates both plr.vcxproj and pgsql.sln
      perl contrib\plr\buildsetup.pl
      pwd
      echo "Files . . ."
      $Table = Get-ChildItem
      foreach ($Row in $Table) { $Row.Name }
      type C:\projects\postgresql\pgsql.sln
      type plr.vcxproj
      # echo . . . COMPARING . . .
      # type pgcrypto.vcxproj
      # type postgres.vcxproj
      popd
      pwd
      echo "Files . . ."
      $Table = Get-ChildItem
      foreach ($Row in $Table) { $Row.Name }
      $env:proj="C:\projects\postgresql\pgsql.sln"
      $env:dll="c:\projects\postgresql\$env:Configuration\plr\plr.dll"
    }

# Remove the semi-duplicate "plr" entry int the pgsql.sln file.
# This is needed for msvc versions 2019 and later.
# On msvc 2017 and older versions this duplicate entry is required.
- if exist C:\projects\postgresql\pgsql.sln if "%branchtagcommit%"=="yes" if "%msvc_age%"=="2019_or_younger" (
    echo REMOVE plr ENTRY from pgsql.sln &
    echo FILE BEFORE clean_pgsql_sln.sh C:\projects\postgresql\pgsql.sln &
    type      C:\projects\postgresql\pgsql.sln &
    bash -lc '/c/projects/plr/clean_pgsql_sln.sh' &
    echo FILE AFTER clean_pgsql_sln.sh C:\projects\postgresql\pgsql.sln &
    type      C:\projects\postgresql\pgsql.sln
  )

# PostgreSQL from Appveyor or an EnterpriseDB already-compiled-binary.
- ps: |
    # Set-PSDebug -Trace 2
    if ("$env:pg" -match "[.]") {
      $env:proj="plr.vcxproj"
      $env:dll="$($env:Platform.replace('x86', '.'))\$env:Configuration\plr.dll"
      if (-not (Test-Path "$env:pgroot\bin")) {
        if (-not (Test-Path "$env:exe")) {
          Start-FileDownload "http://get.EnterpriseDB.com/postgresql/$env:exe"
        }
        & ".\$env:exe" --unattendedmodeui none --mode unattended --superpassword "$env:PGPASSWORD" --servicepassword "$env:PGPASSWORD" | Out-Null
        Stop-Service "postgresql$env:x64-$env:pgversion"
        if ( Test-Path "$env:pgroot\bin" ) {
          echo  "Directory $env:pgroot\bin does exist. - software from EnterpriseDB (https://www.enterprisedb.com/downloads/postgres-postgresql-downloads)."
          echo "$env:pgroot"
          echo "Files . . ."
          $Table = Get-ChildItem "$env:pgroot"
          foreach ($Row in $Table) { $Row.Name }
        } else {
          throw "Directory $env:pgroot\bin does not exist.`r`nDoes EnterpriseDB (https://www.enterprisedb.com/downloads/postgres-postgresql-downloads) have that version/platform combination?"
        }
      }
      if ( Test-Path "$env:pgroot\bin" ) {
        echo  "Directory $env:pgroot\bin does exist. - solution from appveyor (https://www.appveyor.com/docs/services-databases/#postgresql) or EnterpriseDB (https://www.enterprisedb.com/downloads/postgres-postgresql-downloads)."
        echo "$env:pgroot"
        echo "Files . . ."
        $Table = Get-ChildItem "$env:pgroot"
        foreach ($Row in $Table) { $Row.Name }
      } else {
        throw "Neither appveyor (https://www.appveyor.com/docs/services-databases/#postgresql) nor EnterpriseDB (https://www.enterprisedb.com/downloads/postgres-postgresql-downloads) have that version/platform combination?"
      }
    }


#on_failure:
# - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

cache:
- '%exe%'
- R-%rversion%-win.exe
- '%betterperl%.zip'

build_script:
- if %Platform%==x86 set CPlatform=Win32
- if %Platform%==x64 set CPlatform=x64
- msbuild /p:PlatformToolset=%PlatformToolset% /p:configuration=%CONFIGURATION% /p:platform=%CPlatform%
          %PROJ%
          /verbosity:minimal /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"

after_build:
- appveyor AddMessage Packing -Category Information
- md tmp\share\extension
- copy *.sql tmp\share\extension\
- copy *.control tmp\share\extension\
- copy LICENSE tmp\PLR_LICENSE
- md tmp\lib
- md tmp\symbols
- copy %dll% tmp\lib
- copy %dll:.dll=.pdb% tmp\symbols
- set zip=plr-%APPVEYOR_REPO_COMMIT:~0,8%-pg%pgversion%-R%rversion%-%PLATFORM%-%CONFIGURATION%.zip
- 7z a -r %zip% .\tmp\* > nul
- ps: |
    if ("$env:pg" -notmatch "[.]") {
      pushd c:\projects\postgresql\src\tools\msvc
      perl install.pl "$env:pgroot"
      popd
    }

test_script:
- path %pgroot%\bin;%PATH%
- ps: |
    if ("${env:branchtagcommit}" -eq "yes") {
      Set-Content -path pg.pass -value "$env:pgpassword" -encoding ascii
      initdb -A md5 -U "$env:PGUSER" --pwfile=pg.pass C:\pgdata
      pg_ctl register -S demand -N "postgresql$env:x64-$env:pgversion" -D c:\pgdata
    } else {
      Add-AppveyorMessage "Copying the extension files to the PostgreSQL directories." -Category Information
      7z x "$env:zip" "-o$env:pgroot"
    }
- appveyor AddMessage "Starting the database server." -Category Information
- setx /M PATH "%R_HOME%\bin\%rbin%;%PATH%"
- net start postgresql%x64%-%pgversion%

- ps: |
    Add-AppveyorTest Regression -Framework pg_regress -FileName sql\ -Outcome Running
    if (("9.3", "9.4").Contains("$env:pgversion")) {
      $env:psqlopt="--psqldir"
    } else {
      $env:psqlopt="--bindir"
    }
    $env:Outcome="Passed"
    $elapsed=(Measure-Command {
      pg_regress "$env:psqlopt=$env:pgroot\bin" --dbname=pl_regression plr `
        bad_fun opt_window do out_args plr_transaction opt_window_frame 2>&1 |
        %{ if ($_ -is [System.Management.Automation.ErrorRecord]) { $_.Exception.Message } else { $_ } } |
          Out-Default
      if ($LASTEXITCODE -ne 0) {
        $env:Outcome="Failed"
      }
    }).TotalMilliseconds
    Update-AppVeyorTest Regression -Framework pg_regress -FileName sql\ -Outcome "$env:Outcome" -Duration $elapsed
    if ("$env:Outcome" -ne "Passed") {
      type regression.diffs
      $host.SetShouldExit($LastExitCode)
    }

artifacts:
- path: 'plr*.zip'

deploy:
   provider: GitHub
   release: $(appveyor_repo_tag_name)
   draft: false
   prerelease: false
   auth_token:
      secure: DpxrjrmF0pQsm3G/F8m7EDVz6yhBQhlwXWOtqxgQTmUMiofL1PZD+9Q1dAqyKh9Z
   on:
      appveyor_repo_tag: true

