
# required to be here, so that Visual Studio 2015, can compile PostgreSQL
image: Visual Studio 2015

clone_depth: 1
environment:
  PGUSER: postgres
  PGPASSWORD: Password12!
  PGOPTIONS: -c log_error_verbosity=verbose -c log_min_messages=debug2 -c log_min_error_statement=debug2
  APPVEYOR_SAVE_CACHE_ON_ERROR: true

  # Notice
  # 1. The first creation of the tag: GITHUBCACHE, will make a 2nd Appeveyor build run
  # 2. Debug Builds that use the hardcoded plr.vcxproj (and plr.vcxproj.proj?) fail fast !
  # 3. msvc.diff.R solves all msvc.diff problems of all compilations
  # 4. After pg 13, the master, has the attional problem that the function hex_decode
  #      is not found. 
  #    See the commit c3826f831e6e63e13a749fd3ab9fd7106707b549
  #    See the commit 62afb42a7f9f533efc6c19f462c3a848fa4ddb63

  # pg - should be a specific binary version
  # from https://www.enterprisedb.com/downloads/postgres-postgresql-downloads
  # and its platforms: "Windows x86-64" and "Windows x86-32"
  # This is "platform: x64" or "platform: x86"
  #
  # Alternately, pg can be a git branch, tag, or commit
  #
  # A branch, tag, and commit, is different from an already-compiled binary.
  # It "does not have a dot "."" in the pg name.

  # Of pg, if a commit is wanted, then also the flag - "pghint: commit" also must be set.
  #
  # Of a branch, tag, and commit, optionally,
  # the flag -  githubcache: true - may be set, to try to store the
  # compiled pg in the github releases GITHUBCACHE, then retrieve it when necessary.
  # Because compiling uses much time, and to try to avoid re-compiling,
  # this "flag" can be useful for static source code, e.g., tags and commits
  #
  # When compiling plr with pg source code (branch, tag, or commit), the
  # R file msvc.diff.R will be run, using Rscript.exe, and will patch files.
  # These patched files will reduce the PostgreSQL regression testing to just the plr extension.
  #
  # If pg is a specific binary version
  # and that PostgreSQL x64 version is already installed on Appveyor,
  # then instead, the Appveyor version and platform will be used.
  # A PostgreSQL pg binary will-not-be downloaded from "enterprisedb".
 
  matrix:
  
#   # REL_13_STABLE # branch - non-static commit
#   - pg: REL_13_0  # tag - static commit
#     PlatformToolset: v141
#     configuration: Release
#     platform: x64
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
#     rversion: 4.0.3
#     #
#     githubcache: true

#   # REL_13_STABLE # branch - non-static commit
#   - pg: REL_13_0  # tag - static commit
#     PlatformToolset: v141
#     configuration: Debug
#     platform: x64
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
#     rversion: 4.0.3
#     #
#     githubcache: true

#   # REL_13_0
#   - pg: 13.1-1
#     PlatformToolset: v141
#     configuration: Release
#     platform: x64
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
#     rversion: 4.0.3

#     # REL_13_STABLE # branch - non-static commit
#     - pg: REL_13_0  # tag - static commit
#       PlatformToolset: v141
#       configuration: Release
#       platform: x64
#       APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
#       rversion: 4.0.3
#       #
#       # githubcache: true
#       #  do not look/save compiled pg in Github release GITHUBCACHE
#       #  default of githubcache is false

#   # REL_12_0
#   - pg: 12.5-1
#     PlatformToolset: v141
#     configuration: Debug
#     platform: x64
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
#     rversion: 4.0.3

#   # 12.5-1
#   - pg: REL_12_0
#     PlatformToolset: v141
#     configuration: Debug
#     platform: x64
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
#     rversion: 4.0.3
#     githubcache: true

#
#   - pg: master
#     PlatformToolset: v141
#     configuration: Debug
#     platform: x64
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
#     rversion: 4.0.3
#
#
#   # Initial pgindent and pgperltidy run for v13.
#   # src/tools/msvc/Mkvcbuild.pm
#   #
#   # static commit
#   - pg: 5cbfce562f7cd2aab0cdc4694ce298ec3567930e
#     #
#     pghint: commit
#     #
#     PlatformToolset: v141
#     configuration: Release
#     platform: x64
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
#     rversion: 4.0.3
#     #
#     githubcache: true
#
#   # REL_12_0
#   - pg: 12.5-1
#     PlatformToolset: v141
#     configuration: Release
#     platform: x64
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
#     rversion: 4.0.3
#
#   # REL_11_0
#   - pg: 11.11-1
#     PlatformToolset: v141
#     configuration: Release
#     platform: x64
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
#     rversion: 3.6.0
#
#   # REL_10_0
#   - pg: 10.16-1
#     PlatformToolset: v120
#     configuration: Release
#     platform: x64
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
#     rversion: 3.6.0
#
#   # REL9_6_0
#   - pg: 9.6.21
#     PlatformToolset: v120
#     configuration: Release
#     platform: x64
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
#     rversion: 3.6.0
#
#   - pg: 9.5.25-1
#     PlatformToolset: v120
#     configuration: Release
#     platform: x64
#     APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
#     rversion: 3.6.0
#
  - pg: 9.4.4-3
    PlatformToolset: v120
    configuration: Release
    platform: x64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    rversion: 3.6.0

  - pg: 9.4.4-3
    PlatformToolset: v120
    configuration: Debug
    platform: x64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    rversion: 3.6.0

  - pg: 9.4.4-3
    PlatformToolset: v120
    configuration: Release
    platform: x86
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    rversion: 3.6.0

  - pg: 9.4.4-3
    PlatformToolset: v120
    configuration: Debug
    platform: x86
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    rversion: 3.6.0

matrix:
  allow_failures:
    - pg: master

# Appveyor build server environment variables
#
# ProgramFiles=C:\Program Files
# ProgramFiles(x86)=C:\Program Files (x86)
#
init: # Make %x64% available for caching
- if %PLATFORM%==x64 ( set pf=%ProgramFiles%&& set x64=-x64) else set pf=%ProgramFiles(x86)%
- set exe=postgresql-%pg%-windows%x64%.exe
- setx /m exe %exe%
# possible user provided in the matrix
- if not defined githubcache set githubcache=false
- if not defined pghint      set pghint=none

install:
- if not exist R-%rversion%-win.exe appveyor downloadfile https://cran.r-project.org/bin/windows/base/old/%rversion%/R-%rversion%-win.exe
- R-%rversion%-win.exe /VERYSILENT
# We could have used RTools many R users have, but let's use msys64 existing on Appveyor intead
#- if not exist Rtools35.exe appveyor downloadfile https://cran.r-project.org/bin/windows/Rtools/Rtools35.exe
#- Rtools35.exe /VERYSILENT
- Set mingw=C:\msys64\mingw
# enterprisedb version name - strip off, if any, the - right-most part dot, then numbers, then one hyphen, then numbers
- ps: $env:pgversion = $env:pg -replace "[.]\d+-\d+$", ""
- echo pgversion=%pgversion%
- set pgroot=%pf%\PostgreSQL\%pgversion%
- echo %pgroot%
- SET R_HOME=%ProgramFiles%\R\R-%rversion%
- set RBIN=%PLATFORM:x86=i386%
- SET sed=C:\msys64\usr\bin\sed
#
# CHANGE THE CURL URL BEFORE THE PULL REQUEST (IF ANY)
- set pgzip=pg-pg%pgversion%-R%rversion%-%PLATFORM%-%CONFIGURATION%.zip
- set pggithubbincacheurl=https://github.com/AndreMikulec/plr/releases/download/GITHUBCACHE/%pgzip%
- if "%githubcache%"=="true" if not exist "%pgzip%"  (
    bash --login -c "$(cygpath ${APPVEYOR_BUILD_FOLDER})/pggithubbincachefailingfound.sh" &
    for /f "delims=" %%i in (%APPVEYOR_BUILD_FOLDER%\pggithubbincachefailingfound.txt) do (set pggithubbincachefailingfound=%%i)
  )
- if "%githubcache%"=="true" if "%pggithubbincachefailingfound%"=="false" curl -o "%pgzip%" -L "%pggithubbincacheurl%"
- if "%githubcache%"=="true" if "%pggithubbincachefailingfound%"=="false" if exist "%pgzip%" (set pggithubbincachefound=true) else (set pggithubbincachefound=false)
- if "%githubcache%"=="true" if "%pggithubbincachefailingfound%"=="false" if "%pggithubbincachefound%"=="true" (
      mkdir            "%pgroot%" &
      7z x "%pgzip%" "-o%pgroot%" &
      dir "%pgroot%" &
      if exist "%pgroot%\bin\postgres.exe" (set pggithubbincacheextracted=true) else (set pggithubbincacheextracted=false)
  )
# user provided (if any), in the matrix
- echo githubcache %githubcache%
# generated
# internal - do not reuse
- echo pggithubbincachefailingfound %pggithubbincachefailingfound%
# reused below
- echo pggithubbincachefound %pggithubbincachefound%
- if not defined pggithubbincachefound set pggithubbincachefound=false
- echo pggithubbincachefound %pggithubbincachefound%
# reused below
- echo pggithubbincacheextracted %pggithubbincacheextracted%
- if not defined pggithubbincacheextracted set pggithubbincacheextracted=false
- echo pggithubbincacheextracted %pggithubbincacheextracted%

# remove old files
- ps: |
    Set-PSDebug -Trace 2
    if (("$env:githubcache" -eq "true") -and ("$env:pggithubbincacheextracted" -eq "true")) {
      pushd "$env:pgroot"
      del share\extension\plr-*.sql
      del share\extension\plr.control
      del lib\plr.dll
      del symbols\plr.pdb
      popd
    }
# minimal required
- ps: |
    Set-PSDebug -Trace 2
    if (("$env:githubcache" -eq "true") -and ("$env:pggithubbincacheextracted" -eq "true")) {
      $env:PROJ="plr.vcxproj"
      $env:dll="$($env:PLATFORM.replace('x86', '.'))\$env:CONFIGURATION\plr.dll"
    }

- ps: |
    # "branchtagcommit" exists only because it is an easier test in a windows batch
    # test used in determining whether or not to perform patching (see below)
    if ("$env:pg" -notmatch "[.]") {
      $env:branchtagcommit = "yes"
    } else {
      $env:branchtagcommit = "no"
    }
    echo "branchtagcommit $env:branchtagcommit"

- ps: |
    Set-PSDebug -Trace 2
    # notmatch - no "dot found" in pg name, is a branch, tag, or commit
    if (("$env:pggithubbincacheextracted" -eq "false") -and ("$env:pg" -notmatch "[.]")) {
      git config --global advice.detachedHead false
      $env:Path += ";C:\msys64\usr\bin;C:\msys64\mingw64\bin;C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\amd64"
      # git branch or commit - alphanumeric and all lowercase letters (slower download)
      if(("$env:pg" -cmatch  "^[a-z0-9]+$") -and ("$env:pghint" -eq "commit")) {
        git clone -q                            https://git.postgresql.org/git/postgresql.git c:\projects\postgresql
        pwd
        pushd c:\projects\postgresql
        pwd
        git checkout -q                 $env:pg -b $env:pg
        git branch
        echo $env:pg
        popd
        pwd
      # git branch or tag(detached head)
      # PostgreSQL case - git branches and tags have at least one capital letter - but expect mostly CAPS
      } else {
        git clone -q --depth 1 --branch $env:pg https://git.postgresql.org/git/postgresql.git c:\projects\postgresql
        pushd c:\projects\postgresql
        pwd
        git branch
        echo $env:pg
        popd
        pwd
      }
      pushd c:\projects\postgresql
      dir
      popd
    }
- if "%pggithubbincacheextracted%"=="false" if "%branchtagcommit%"=="yes" (
      echo Begin performing patching on-the-fly &
      echo Begin patching &
      echo "%R_HOME%\bin\%RBIN%\Rscript.exe" --vanilla %APPVEYOR_BUILD_FOLDER%\msvc.diff.R &
           "%R_HOME%\bin\%RBIN%\Rscript.exe" --vanilla %APPVEYOR_BUILD_FOLDER%\msvc.diff.R &
      echo End patching &
      echo Begin display of Mkvcbuild.pm &
      type c:\projects\postgresql\src\tools\msvc\Mkvcbuild.pm &
      echo End display of Mkvcbuild.pm &
      echo Begin display of vcregress.pl &
      type c:\projects\postgresql\src\tools\msvc\vcregress.pl &
      echo End display of vcregress.pl &
      echo End performaing patching on-the-fly
  )
# from source code
- ps: |
    Set-PSDebug -Trace 2
    if (("$env:pggithubbincacheextracted" -eq "false") -and ("$env:pg" -notmatch "[.]")) {
      gendef - "$env:R_HOME\bin\$env:RBIN\R.dll" > "R$env:PLATFORM.def" 2> $null
      lib "/def:R$env:PLATFORM.def" "/out:R$env:PLATFORM.lib" "/MACHINE:$env:PLATFORM"
      dir
      pushd c:\projects\postgresql
      dir
      cmd /c mklink /J contrib\plr $env:APPVEYOR_BUILD_FOLDER
      # patch already done - above
      # patch -p1 -i "$env:APPVEYOR_BUILD_FOLDER\msvc.diff"
      #
      # creates both plr.vcxproj and pgsql.sln
      perl contrib\plr\buildsetup.pl
      dir
      type C:\projects\postgresql\pgsql.sln
      type plr.vcxproj
      popd
      dir
      $env:PROJ="C:\projects\postgresql\pgsql.sln"
      $env:dll="c:\projects\postgresql\$env:CONFIGURATION\plr\plr.dll"
    }
# from binary
- ps: |
    Set-PSDebug -Trace 2
    if (("$env:pggithubbincacheextracted" -eq "false") -and ("$env:pg" -match "[.]")) {
      $env:PROJ="plr.vcxproj"
      $env:dll="$($env:PLATFORM.replace('x86', '.'))\$env:CONFIGURATION\plr.dll"
      if (-not (Test-Path "$env:pgroot\bin")) {
        if (-not (Test-Path "$env:exe")) {
          Start-FileDownload "http://get.enterprisedb.com/postgresql/$env:exe"
        }
        & ".\$env:exe" --unattendedmodeui none --mode unattended --superpassword "$env:PGPASSWORD" --servicepassword "$env:PGPASSWORD" | Out-Null
        Stop-Service "postgresql$env:x64-$env:pgversion"
        dir "$env:pgroot"
      }
      dir "$env:pgroot"
    }

cache:
- '%exe%'
- R-%rversion%-win.exe

build_script:
- REM verbosity levels: q[uiet], m[inimal](orig program), n[ormal] (default), d[etailed], and diag[nostic]
- msbuild /p:PlatformToolset=%PlatformToolset% /p:configuration=%CONFIGURATION% /p:platform=%PLATFORM%
          %PROJ%
          /verbosity:quiet /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
- dir

after_build:
- appveyor AddMessage Packing -Category Information
- md tmp\share\extension
- dir
- copy *.sql tmp\share\extension\
- copy *.control tmp\share\extension\
- copy LICENSE tmp\PLR_LICENSE
- md tmp\lib
- md tmp\symbols
- copy %dll% tmp\lib
- copy %dll:.dll=.pdb% tmp\symbols
- dir tmp
- set zip=plr-%APPVEYOR_REPO_COMMIT:~0,8%-pg%pgversion%-R%rversion%-%PLATFORM%-%CONFIGURATION%.zip
- 7z a -r %zip% .\tmp\* > nul
#
- ps: |
    Set-PSDebug -Trace 2
    if (("$env:pggithubbincacheextracted" -eq "false") -and ("$env:pg" -notmatch "[.]")) {
      pushd c:\projects\postgresql\src\tools\msvc
      pwd
      dir
      perl install.pl "$env:pgroot"
      dir
      popd
      pwd
    }
#
# same as above (repeated here)
- set pgzip=pg-pg%pgversion%-R%rversion%-%PLATFORM%-%CONFIGURATION%.zip
#
# note, zipping must be performed here, after - perl install . pl
# note, pg has been installed inside %pgroot% == %pf%\PostgreSQL\%pgversion% (see above)
# note, the db must be down
# note, the environment variable "pggithubbincachefound" is
#       used in determining whether or not to attempt to deploy to the Github release GITHUBCACHE (see below)
#
# "%pgroot%\bin\postgres.exe" SHOULD BE THERE - missing should NOT happen
- if "%githubcache%"=="true" if "%pggithubbincachefound%"=="false" if exist "%pgroot%\bin\postgres.exe" (
    7z a -r "%pgzip%"  "%pgroot%\*" > nul
  )


test_script:
- path %pgroot%\bin;%PATH%
# which from? mingw?
- which postgres
# from source code, but at this point in time,
# the source code is an already (compiled) binary on disk - see above - perl install . pl
- ps: |
    Set-PSDebug -Trace 2
    if ("$env:pg" -notmatch "[.]") {
      Set-Content -path pg.pass -value "$env:pgpassword" -encoding ascii
      initdb -A md5 -U "$env:PGUSER" --pwfile=pg.pass C:\pgdata
      pg_ctl register -S demand -N "postgresql$env:x64-$env:pgversion" -D c:\pgdata
    } else {
      Add-AppveyorMessage "Copying the extension files to the PostgreSQL directories." -Category Information
      7z x "$env:zip" "-o$env:pgroot"
    }
    #
    if (("$env:githubcache" -eq "true") -and ("$env:pggithubbincacheextracted" -eq "true")) {
      7z x "$env:zip" "-o$env:pgroot"
    }

- appveyor AddMessage "Starting the database server." -Category Information
- setx /M PATH "%R_HOME%\bin\%RBIN%;%PATH%"
- net start postgresql%x64%-%pgversion%
#
# need the server_version_num, so we can later, test to determine "psqlopt"
- psql --quiet --tuples-only -c "\pset footer off" -c "\timing off" -c "select current_setting('server_version_num')::integer;"  --output=server_version_num.txt
- bash --login -c "$(cygpath ${APPVEYOR_BUILD_FOLDER})/server_version_num.sh"
- for /f "delims=" %%i in (server_version_num.txt) do (set server_version_num=%%i)
- type  server_version_num.txt
- echo %server_version_num%
#
- ps: |
    Set-PSDebug -Trace 2
    Add-AppveyorTest Regression -Framework pg_regress -FileName sql\ -Outcome Running
    # less than pg 9.5
    if ([double]"$env:server_version_num" -lt 90500.0) {
      $env:psqlopt="--psqldir"
    } else {
      $env:psqlopt="--bindir"
    }
    $env:Outcome="Passed"
    $elapsed=(Measure-Command {
      pg_regress "$env:psqlopt=$env:pgroot\bin" --dbname=pl_regression plr `
        bad_fun opt_window do out_args 2>&1 |
        %{ if ($_ -is [System.Management.Automation.ErrorRecord]) { $_.Exception.Message } else { $_ } } |
          Out-Default
      if ($LASTEXITCODE -ne 0) {
        $env:Outcome="Failed"
      }
    }).TotalMilliseconds
    Update-AppVeyorTest Regression -Framework pg_regress -FileName sql\ -Outcome "$env:Outcome" -Duration $elapsed
    if ("$env:Outcome" -ne "Passed") {
      type regression.diffs
      $host.SetShouldExit($LastExitCode)
    }

artifacts:
- path: 'plr-*.zip'
  name: plr_zip
- path: 'pg-*.zip'
  name: pg_zip


deploy:
  - provider: GitHub
    release: GITHUBCACHE
    draft: false
    prerelease: false
    artifact: pg_zip
    auth_token:
      # CHANGE BACK TO THE 'ORIGINAL' BEFORE THE PULL REQUEST (IF ANY)
      secure: KzS1DumC2yBg2LGN9x3AemHFOjAdp+rD58rW5aGGpwW4Pfdwdm7AmRpYKprPY8Gs
    on:
      pggithubbincachefound: false
      # non - "branch, tag, or commit" will still be expected "false" ( githubcache != true )
      # and never find a pg-*.zip to deploy - and that is OK.

  # second, last of Github deployments, to try to appear as "latest"
  - provider: GitHub
    release: $(appveyor_repo_tag_name)
    draft: false
    prerelease: false
    artifact: plr_zip
    auth_token:
      # CHANGE BACK TO THE 'ORIGINAL' BEFORE THE PULL REQUEST (IF ANY)
      secure: KzS1DumC2yBg2LGN9x3AemHFOjAdp+rD58rW5aGGpwW4Pfdwdm7AmRpYKprPY8Gs
    on:
      appveyor_repo_tag: true

  - provider: FTP
    host: frs.sourceforge.net
    protocol: sftp
    username: andremikulec,andremikulec.u
    password:
      secure: 4gk4GyW4O5RooiOyGeRdoA==
    artifact: pg_zip, plr_zip
    folder: /home/frs/project/andremikulec
    application:
    active_mode: false
