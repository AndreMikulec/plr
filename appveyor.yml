
# required to be here, so that Visual Studio 2015, can compile PostgreSQL
image: Visual Studio 2015
clone_depth: 1
environment:
  PGUSER: postgres
  PGPASSWORD: Password12!
  PGOPTIONS: -c log_error_verbosity=verbose -c log_min_messages=debug2 -c log_min_error_statement=debug2

  # pg - must always be a specific version 
  # (if not a git branch, nor tag, nor commit(REQUIRED: "pghint: commit"))
  # that is downloadable from 
  # https://www.enterprisedb.com/downloads/postgres-postgresql-downloads
  #
  # If PostgreSQL is already installed on Appveyor, then that version will be used.
  # Alternately, the installation binary will downloaded and installed.
  # 
  # If pg is a branch, tag, or commit, then the source code will be downloaded from git
  # and compiled (msvc.diff.R will modify files).
  # The modified files will reduce the testing to just plr.

  matrix:
  
  - pg: REL_13_0
    PlatformToolset: v141
    configuration: Debug
    platform: x64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    rversion: 4.0.3
  - pg: REL_13_0
    PlatformToolset: v141
    configuration: Debug
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    rversion: 3.6.0
  
  - pg: master
    PlatformToolset: v141
    configuration: Debug
    platform: x64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    rversion: 4.0.3
  - pg: master
    PlatformToolset: v141
    configuration: Debug
    platform: x64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    rversion: 3.6.3
    
  # Initial pgindent and pgperltidy run for v13.
  # src/tools/msvc/Mkvcbuild.pm 
  #
  - pg: 5cbfce562f7cd2aab0cdc4694ce298ec3567930e
    pghint: commit
    PlatformToolset: v141
    configuration: Debug
    platform: x64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    rversion: 4.0.3
  - pg: 5cbfce562f7cd2aab0cdc4694ce298ec3567930e
    pghint: commit
    PlatformToolset: v141
    configuration: Debug
    platform: x64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    rversion: 3.6.0
    
  - pg: 13.2-1
    PlatformToolset: v141
    configuration: Release
    platform: x64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    rversion: 4.0.3
  - pg: 13.2-1
    PlatformToolset: v141
    configuration: Release
    platform: x64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    rversion: 3.6.0
    
  - pg: 12.4-1
    PlatformToolset: v141
    configuration: Release
    platform: x64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    rversion: 4.0.3
  - pg: 12.4-1
    PlatformToolset: v141
    configuration: Release
    platform: x64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    rversion: 3.6.0
    
  - pg: 11.9-1
    PlatformToolset: v141
    configuration: Release
    platform: x64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    rversion: 4.0.3
  - pg: 11.9-1
    PlatformToolset: v141
    configuration: Release
    platform: x64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    rversion: 3.6.0
    
  - pg: 10.16-1
    PlatformToolset: v140
    configuration: Release
    platform: x64
    rversion: 3.6.0
  - pg: 10.16-1
    PlatformToolset: v140
    configuration: Release
    platform: x86
    rversion: 3.6.0
    
  - pg: 9.6.13-1
    PlatformToolset: v120
    configuration: Release
    platform: x64
    rversion: 3.6.0
  - pg: 9.6.13-1
    PlatformToolset: v120
    configuration: Release
    platform: x86
    rversion: 3.6.0
  
  - pg: 9.5.25-1
    PlatformToolset: v120
    configuration: Release
    platform: x64
    rversion: 3.6.0
  - pg: 9.5.25-1
    PlatformToolset: v120
    configuration: Release
    platform: x86
    rversion: 3.6.0
  
matrix:
  allow_failures:
    - pg: master

init: # Make %x64% available for caching
- if %PLATFORM%==x64 ( set pf=%ProgramFiles%&& set x64=-x64) else set pf=%ProgramFiles(x86)%
- set exe=postgresql-%pg%-windows%x64%.exe
- setx /m exe %exe%

install:
- if not exist R-%rversion%-win.exe appveyor downloadfile https://cran.r-project.org/bin/windows/base/old/%rversion%/R-%rversion%-win.exe
- R-%rversion%-win.exe /VERYSILENT
# We could have used RTools many R users have, but let's use msys64 existing on Appveyor intead
#- if not exist Rtools35.exe appveyor downloadfile https://cran.r-project.org/bin/windows/Rtools/Rtools35.exe
#- Rtools35.exe /VERYSILENT
- Set mingw=C:\msys64\mingw
# strip off, if any, the right-most part - dot then numbers then one hyphen then numbers
- ps: $env:pgversion = $env:pg -replace "[.]\d+-\d+$", ""
- echo pgversion=%pgversion%
- set pgroot=%pf%\PostgreSQL\%pgversion%
- echo %pgroot%
- SET R_HOME=%ProgramFiles%\R\R-%rversion%
- set RBIN=%PLATFORM:x86=i386%
- SET sed=C:\msys64\usr\bin\sed
- ps: |
    Set-PSDebug -Trace 2
    # no dot found - branch, tag, or commit
    if ("$env:pg" -notmatch "[.]") {
      $env:Path += ";C:\msys64\usr\bin;C:\msys64\mingw64\bin;C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\amd64"
      # git branch or commit - alphanumeric and all lowercase letters (slower download)
      if(("$env:pg" -cmatch  "^[a-z0-9]+$") -and ("$env:pghint" -eq "commit")) {
        git clone -q --no-checkout             https://git.postgresql.org/git/postgresql.git c:\projects\postgresql
        Get-Location
        pushd c:\projects\postgresql
        Get-Location
        git checkout                   $env:pg
        popd
        Get-Location
      # git branch or tag(detached head) 
      # PostgreSQL case - git branches and tags have at least one capital letter - but expect mostly CAPS
      } else {
        git clone -q --depth 1 --branch $env:pg https://git.postgresql.org/git/postgresql.git c:\projects\postgresql
      }
      gendef - "$env:R_HOME\bin\$env:RBIN\R.dll" > "R$env:PLATFORM.def" 2> $null
      lib "/def:R$env:PLATFORM.def" "/out:R$env:PLATFORM.lib" "/MACHINE:$env:PLATFORM"
      dir
      pushd c:\projects\postgresql
      dir
      cmd /c mklink /J contrib\plr $env:APPVEYOR_BUILD_FOLDER
      # patch -p1 -i "$env:APPVEYOR_BUILD_FOLDER\msvc.diff"
      # patch on-the-fly
      Start-Process "$env:R_HOME\bin\$env:RBIN\Rscript.exe" -ArgumentList "--arch $env:RBIN --vanilla $env:APPVEYOR_BUILD_FOLDER\msvc.diff.R" -NoNewWindow -Wait
      type c:\projects\postgres\src\tools\msvc\Mkvcbuild.pm
      type c:\projects\postgres\src\tools\msvc\vcregress.pl 
      # creates both plr.vcxproj and pgsql.sln
      perl contrib\plr\buildsetup.pl
      dir
      type C:\projects\postgresql\pgsql.sln
      type plr.vcxproj
      type pgcrypto.vcxproj
      popd
      dir
      $env:PROJ="C:\projects\postgresql\pgsql.sln"
      $env:dll="c:\projects\postgresql\.\$env:CONFIGURATION\plr\plr.dll"
    } else {
      $env:PROJ="plr.vcxproj"
      $env:dll="$($env:PLATFORM.replace('x86', '.'))\$env:CONFIGURATION\plr.dll"
      if (-not (Test-Path "$env:pgroot\bin")) {
        if (-not (Test-Path "$env:exe")) {
          Start-FileDownload "http://get.enterprisedb.com/postgresql/$env:exe"
        }
        & ".\$env:exe" --unattendedmodeui none --mode unattended --superpassword "$env:PGPASSWORD" --servicepassword "$env:PGPASSWORD" | Out-Null
        Stop-Service "postgresql$env:x64-$env:pgversion"
      }
    }

cache:
- '%exe%'
- R-%rversion%-win.exe

build_script:
- REM verbosity levels: q[uiet], m[inimal](orig program), n[ormal] (default), d[etailed], and diag[nostic]
- msbuild /p:PlatformToolset=%PlatformToolset% /p:configuration=%CONFIGURATION% /p:platform=%PLATFORM%
          %PROJ%
          /verbosity:normal /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
- dir

after_build:
- appveyor AddMessage Packing -Category Information
- md tmp\share\extension
- dir
- copy *.sql tmp\share\extension\
- copy *.control tmp\share\extension\
- copy LICENSE tmp\PLR_LICENSE
- md tmp\lib
- md tmp\symbols
- copy %dll% tmp\lib
- copy %dll:.dll=.pdb% tmp\symbols
- dir tmp
- set zip=plr-%APPVEYOR_REPO_COMMIT:~0,8%-pg%pgversion%-R%rversion%-%PLATFORM%-%CONFIGURATION%.zip
- 7z a -r %zip% .\tmp\* > nul
- ps: |
    Set-PSDebug -Trace 2
    if ("$env:pg" -notmatch "[.]") {
      pushd c:\projects\postgresql\src\tools\msvc
      Get-Location
      dir
      perl install.pl "$env:pgroot"
      dir
      popd
      Get-Location
    }

test_script:
- path %pgroot%\bin;%PATH%
- ps: |
    Set-PSDebug -Trace 2
    if ("$env:pg" -notmatch "[.]") {
      Set-Content -path pg.pass -value "$env:pgpassword" -encoding ascii
      initdb -A md5 -U "$env:PGUSER" --pwfile=pg.pass C:\pgdata
      pg_ctl register -S demand -N "postgresql$env:x64-$env:pgversion" -D c:\pgdata
    } else {
      Add-AppveyorMessage "Copying the extension files to the PostgreSQL directories." -Category Information
      7z x "$env:zip" "-o$env:pgroot"
    }
- appveyor AddMessage "Starting the database server." -Category Information
- setx /M PATH "%R_HOME%\bin\%RBIN%;%PATH%"
- net start postgresql%x64%-%pgversion%
- postgres -V
- set pgtrueversion <- 
- ps: |
    Set-PSDebug -Trace 2
    Add-AppveyorTest Regression -Framework pg_regress -FileName sql\ -Outcome Running
    if (("9.3", "9.4").Contains("$env:pgversion")) {
      $env:psqlopt="--psqldir"
    } else {
      $env:psqlopt="--bindir"
    }
    $env:Outcome="Passed"
    $elapsed=(Measure-Command {
      pg_regress "$env:psqlopt=$env:pgroot\bin" --dbname=pl_regression plr `
        bad_fun opt_window do out_args 2>&1 |
        %{ if ($_ -is [System.Management.Automation.ErrorRecord]) { $_.Exception.Message } else { $_ } } |
          Out-Default
      if ($LASTEXITCODE -ne 0) {
        $env:Outcome="Failed"
      }
    }).TotalMilliseconds
    Update-AppVeyorTest Regression -Framework pg_regress -FileName sql\ -Outcome "$env:Outcome" -Duration $elapsed
    if ("$env:Outcome" -ne "Passed") {
      type regression.diffs
      $host.SetShouldExit($LastExitCode)
    }

artifacts:
- path: '*.zip'

deploy:
   provider: GitHub
   release: $(appveyor_repo_tag_name)
   draft: false
   prerelease: false
   auth_token:
      secure: KzS1DumC2yBg2LGN9x3AemHFOjAdp+rD58rW5aGGpwW4Pfdwdm7AmRpYKprPY8Gs
   on:
      appveyor_repo_tag: true
