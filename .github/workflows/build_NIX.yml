
name: plr CI NIX
contents: write

env:
  # Enabling runner diagnostic logging
  ACTIONS_RUNNER_DEBUG: true
  # Enabling step debug logging
  ACTIONS_STEP_DEBUG: true

on:
  # You can then manually run a workflow on the desired branch and set debug_enabled to true to get a debug session.
  # https://github.com/mxschmitt/action-tmate
  # https://docs.github.com/en/actions/using-workflows/manually-running-a-workflow
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

# IN DEVELOPMENT RIGHT NOW
# on: [push, pull_request]

jobs:

  build_NIX:

    name: ${{ matrix.os }} ${{ matrix.pg }} ${{ matrix.Platform}} ${{ matrix.Configuration }} ${{ matrix.rversion }} ${{ matrix.Compiler }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
    strategy:
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
      matrix:
        include:
            # "pg" choices are the following 
            # Git branch, Git tag, Git commit("${env:pghint}" -eq "commit").
            #
            # If the matrix variable "pghint" is "commit" then pg is a commit and not a tag and not a branch.

            # The matrix variable "pg" can be a git commit.
            # Use "pghint: commit" to explaint that "pg" is a git commit.

            # If "pg" is not in the matrix,then do not compile pg from source.
            # [Later, instead get the pg binaries from a repository.]
            # The version called "pgversion" is not know now. It is determined later.
            #
            # The derived environment variable "pgversion" (the exact internal "pg version")
            # will be determined by SQL.
            # This is used in the asset name.

            # "rversion" is expected to be downloaded over the internet.
            # If "rversion" is not in the matrix, 
            # then expect to get "r" from the repository. (e.g. cygwing case)
            # "rversion" is expect to not be known in advance.

          - pg: REL_16_BETA2
            Configuration: Debug
            Platform: x64
            os: windows-latest
            rversion: 4.3.1
            compiler: mingw64
            builder: make

          - pg: REL_16_BETA2
            Configuration: Debug
            Platform: x64
            os: windows-latest
            rversion: 4.3.1
            compiler: mingw64
            builder: meson

          - Configuration: Debug
            Platform: x64
            os: windows-latest
            compiler: cygwin
            builder: make

          - Configuration: Debug
            Platform: x64
            os: windows-latest
            compiler: cygwin
            builder: meson

    steps:
      - name: Windows System
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          systeminfo

      - name: Windows Powershell add Functions
        if: matrix.os == 'windows-latest'
        run: |
          # NOT AVAILABLE TO FUTURE STEPS - "each step MUST be ITS own MACHINE"
          # Add-Content -Path $profile -Value "function Set-EnvVar {param(`$X)     Add-Content -Path `${env:GITHUB_ENV} -Value `"`$X`"}"
          # Add-Content -Path $profile -Value "function Start-App  {param(`$X,`$Y) Start-Process -NoNewWindow -FilePath `"`$X`" -ArgumentList `$Y }"

      - name: Windows Shortened Git Commit Environment Variable
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          echo USER_SHA ${{ env.USER_SHA }}
          echo GITHUB_SHA ${{ env.GITHUB_SHA }}
          set GITHUB_SHA=${{ env.GITHUB_SHA }}
          rem
          set gitrevshort=%GITHUB_SHA:~0,8%
          echo gitrevshort %gitrevshort%
          printf "gitrevshort=%gitrevshort%" >> %GITHUB_ENV%
          rem
          rem Or in powershell - "${env:GITHUB_SHA}".SubString(0,8)

      - name: Ubuntu and MacOS Shortened Git Commit Environment Variable
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
        run: |
          echo USER_SHA ${{ env.USER_SHA }}
          echo GITHUB_SHA ${{ env.GITHUB_SHA }}
          export GITHUB_SHA=${{ env.GITHUB_SHA }}
          #
          export gitrevshort=${GITHUB_SHA:0:8}
          echo gitrevshort ${gitrevshort}
          echo "gitrevshort=%gitrevshort%" >> $GITHUB_ENV

      - name: Windows Compiler Style Variables
        if: matrix.os == 'windows-latest'
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          #
          # NOTE - DOES NOT use the "Platform" matrix variable to determine 64 or 32
          # to be compatible with "msys2/setup-msys2@v2"
          #
          if ( 
            "${{ matrix.compiler }}" -eq "msys"       -or 
            "${{ matrix.compiler }}" -eq "mingw64"    -or
            "${{ matrix.compiler }}" -eq "mingw32"    -or
            "${{ matrix.compiler }}" -eq "ucrt64"     -or
            "${{ matrix.compiler }}" -eq "clang32"    -or
            "${{ matrix.compiler }}" -eq "clang64"    -or
            "${{ matrix.compiler }}" -eq "clangarm64" 
          ) 
          {
            ${env:compiler_style} = "mingw"
          }
          if ( "${{ matrix.compiler }}" -eq "cygwin" ){
            ${env:compiler_style} = "cygwin"
          }
          if ( "${{ matrix.compiler }}" -eq "msvc" ){
            ${env:compiler_style} = "msvc"
          }
          Set-EnvVar "compiler_style=${env:compiler_style}"

      - name: Windows matrix_Platform_bit Env Variable
        if: matrix.os == 'windows-latest'
        run: |
         function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
         $word = "${{ matrix.Platform }}"
         $shortword = $word.Substring($word.Length - 2)
         if("$shortword" -eq "64" -or "$shortword" -eq "32") {
            ${env:matrix_Platform_bit} = "$shortword"
         } 
         Set-EnvVar "matrix_Platform_bit=${env:matrix_Platform_bit}"

      - name: Windows matrix_Platform_bit Env Variable
        if: matrix.os == 'windows-latest'
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          $word = "${{ matrix.Compiler }}"
          $shortword = $word.Substring($word.Length - 2)
          if("$shortword" -eq "64" -or "$shortword" -eq "32") {
            ${env:matrix_Compiler_bit} = "$shortword"
          }
         Set-EnvVar "matrix_Compiler_bit=${env:matrix_Compiler_bit}"

      # General case
      - name: Windows Platform Environment Variable
        if: matrix.os == 'window-latest'
        run: Set-EnvVar "Platform=${{ matrix.Platform }}"
          
      # General case
      - name: Ubuntu and MacOS Environment Variables
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
        echo "Platform=${{ matrix.Platform }}" >> $GITHUB_ENV

      # General case - Override
      - name: Windows Platform Specific Default Environment Variable
        if: matrix.os == 'window-latest'
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          if("${{ env.matrix_Compiler_bit }}" -eq "" -and "${{ env.matrix_Platform_bit }}" -eq "") {
            # UPFRONT ASSUMPTION - MAY BE CHANGED LATER
            ${env:Platform} = "x64"
            Set-EnvVar "Platform=${env:Platform}"
          }

      # General case - Override
      - name: Ubuntu and MacOS Platform Specific Default Environment Variable
        if: {{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
        run: |
          set -x -v -e
          if [ "${{ env.matrix_Compiler_bit }}" == "" ] && [ "${{ env.matrix_Platform_bit }}" == "" ]
          then
            # UPFRONT ASSUMPTION - MAY BE CHANGED LATER
            export Platform="x64"
            echo "Platform=${Platform}" >> $GITHUB_ENV
          fi

      # From here and onward use env.Platform to read the [Assumed] Platform

      # 64 or 32 will be determined and overridden.
      # mingw "bit" to be Eventually Used in the absolute path name of msys__
      - name: Windows mingw Compiler Style Environment Variables and programs
        if: ${{ matrix.os == 'windows-latest' && env.compiler_style = 'mingw' }}
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          if("${{ env.matrix_Compiler_bit }}" -eq "64") {
            ${env:bit} = "${{ env.matrix_Compiler_bit }}"
            Set-EnvVar "bit=${env:bit}"
            ${env:Platform} = "x64"
          }
          if("${{ env.matrix_Compiler_bit }}" -eq "32") {
            ${env:bit} = "${{ env.matrix_Compiler_bit }}"
            Set-EnvVar "bit=${env:bit}"
            ${env:Platform} = "x86"
          }
          # "msys" 
          if("${{ env.matrix_Compiler_bit }}" -eq "") {
            # case - NEED to verify THIS - www.coin-or.org/OS/documentation/node16.html
            ${env:Platform} = "x86"
          }
          Set-EnvVar "Platform=${env:Platform}"

      # 64 or 32 will be determined.
      # 32 bit cygwin is considerted to be "no BIT"
      # 64 or 32 will be determined and determined
      # cygwin "bit" Used in the absolute path name of cygwin__
      - name: Windows cygwin Compiler Style Environment Variables and programs
        if: ${{ matrix.os == 'windows-latest' && env.compiler_style = 'cygwin' }}
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          if("${{ env.matrix_Platform_bit }}" -eq "64") {
            #
            ${env:bit} = "64"
            Set-EnvVar "bit=${env:bit}"
            #
            ${env:Platform} = "x64"
          }
          if("${{ env.matrix_Platform_bit }}" -eq "86") {
            #
            # 32 bit cygwin is 
            # considerted to be "no BIT"
            #
            ${env:Platform} = "x86"
          }
          Set-EnvVar "Platform=${env:Platform}"

      - name: Windows cygwin Environment Specific Variables
        if: ${{ matrix.os == 'windows-latest' && env.compiler_style = 'cygwin' }}
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          ${env:CYG_ROOT} = "C:\cygwin${{ env.bit }}"
          Set-EnvVar "CYG_ROOT=${env:CYG_ROOT}"
          ${env:CYG_CACHE} =  "${env:CYG_ROOT}\var\cache\setup"
          Set-EnvVar "CYG_CACHE=${env:CYG_CACHE}"
          ${env:CYG_ARCH} = "x86" + $(if("${{ env.Platform }}" -eq "x64"){ "_" }) + "${{ env.bit }}"
          Set-EnvVar "CYG_ARCH=${env:CYG_ARCH}"

      # SHELL
      #
      # I do not want to use the "Git for Windows" Bash
      # Bash 5.2.15(1)-release
      # C\Program Files\Git\bin\bash.exe
      # github.com/actions/runner-images/blob/main/images/win/Windows2022-Readme.md

      - name: Windows mingw SHELL
        if: ${{ matrix.os == 'windows-latest' && env.compiler_style == 'mingw' }}
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}

          # NOTE, "bash" comes with mingw out of the box from msys2/setup-msys2@v2.
          # (I want to use THAT ONE)
          # mingw case

          ${env:SHELL} = "C:\msys${{ env.bit }}\usr\bin\bash.exe"
          Set-EnvVar "SHELL=${env:SHELL}"

          # matrix varible compiler(mingw64) is input to msys2/setup-msys2.
          # msys2/setup-msys2  then determines MSYSTEM.
          # MSYSTEM is used in the absolute path of the msys2 binaries
          #
          # Github Action msys2/setup-msys2 that already provides
          # the environment variable MYSYSTEM.
          #
          # OSBitVersion can be used in an  msys2/setup-msys2 action.
          # This helps provide exact names in msys2 absolute binary name download.
          # see docs - https://github.com/marketplace/actions/setup-msys2
          #
          # (currently not used by this builder)
          #
          # Better that I use ${env:bit} at this point
          # if ("${{ env:MSYSTEM }}" -eq "MINGW64"){ ${env:OSBitVersion} = "x86_64"}
          # if ("${{ env:MSYSTEM }}" -eq "MINGW32"){ ${env:OSBitVersion} = "i686" }
          # Set-EnvVar "OSBitVersion=${env:OSBitVersion}"

      - name: Windows cygwin SHELL
        if: ${{ matrix.os == 'windows-latest' && env.compiler_style == 'cygwin' }}
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          ${env:SHELL} = "C:\cygwin${{ env.bit }}\usr\bin\bash.exe"
          Set-EnvVar "SHELL=${env:SHELL}"

      - name: mingw or cygwin PG Version
        if: ${{ matrix.os == 'windows-latest' && ( env.compiler_style = 'mingw' || env.compiler_style = 'cygwin' ) }}
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          if("${{ env.pg }}" -ne "commit") {  ${env:pgversion} = "${{ matrix.pg }}" }
          Set-EnvVar "pgversion=${env:pgversion}"

      - name: msvc PG Version
        if: ${{ matrix.os == 'windows-latest' &&  env.compiler_style = 'msvc'  }}
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          if( ("${{ env.pg }}" -ne "commit" )  {  
             #
             # From the EnterpriseDB version name
             # if any, strip off the: right-most part dot, then numbers, then one hyphen, then numbers.
  -          ${env:pgversion} = ${env:pg} -replace "[.]\d+-\d+$", ""
          }
          Set-EnvVar "pgversion=${env:pgversion}"


      - name: Checkout code
        uses: actions/checkout@v3

      - name: Downloadable R for Windows - Version - R not from a Repository
        if: ${{ matrix.os == 'windows-latest' && ( env.compiler_style = 'mingw' || env.compiler_style = 'msvc' ) && matrix.rversion != '' }}
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          # R-major.minor.patch

          ${env:rversion} -match '(\d+)'
          ${env:rmajor} = $matches[1]
          Set-EnvVar "rmajor=${env:rmajor}"

          ${env:rversion} -match '\d+[.](\d+)'
          ${env:rminor} = $matches[1]
          Set-EnvVar "rminor=${env:rminor}"

          ${env:rversion} -match '\d+[.]\d+[.](\d+)'
          ${env:rpatch} = $matches[1]
          Set-EnvVar "rpatch=${env:rpatch}"

          ${env:rversionlong} = ([int]"${env:rmajor}" * 10000) + ([int]"${env:rminor}" * 100) + ([int]"${env:rpatch}")
          Set-EnvVar "rversionlong=${env:rversionlong}"

      - name: Windows R Version and Platform Check
        if: ${{ matrix.os == 'windows-latest' && ( env.compiler_style = 'mingw' || env.compiler_style = 'msvc' ) && matrix.rversion != '' && env.rversionlong < 21100 && env.Platform == 'x64' }}
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('R for Windows versions earler than 2.11.0 are only x86 and never x64.')

      - name: Windows R Version and Platform Check - Older than Oldest
        if: ${{ matrix.os == 'windows-latest' && ( env.compiler_style = 'mingw' || env.compiler_style = 'msvc' ) && matrix.rversion != '' && env.rversionlong < 10602  }}
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('R for Windows versions earler than 1.6.2 does not exist.')

      # https://stackoverflow.com/questions/57903836/how-to-fail-a-job-in-github-actions
      - name: Windows R Version and MSVC Version Check
        if: ${{ matrix.os == 'windows-latest' && env.compiler_style == 'msvc' &&  matrix.rversion != '' && env.rversionlong >= 40300 }}
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('Microsoft Visual C++ (msvc) can not compile plr of R version 4.3.0 and later.')

      - name: Windows R Version and MSVC Version Check and Platform Check
        if: ${{ matrix.os == 'windows-latest' && env.compiler_style == 'msvc' &&  matrix.rversion != '' && matrix.Platform = 'x86' && env.rversionlong >= 40103 }}
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('Microsoft Visual C++ (msvc) can not compile Platform x86 plr of R version 4.1.3 and later.')

        # NOTE - mingw does NOT have R in the repository.
        # NOTE - cygwin DOES HAVE R in the repository.
      - name: Downloadable R for Windows - Online Location - R not from a Repository
        if: ${{ matrix.os == 'windows-latest' && ( env.compiler_style = 'mingw' || env.compiler_style = 'msvc' ) && matrix.rversion != '' }}
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          #
          # R for Windows Online Download Locaton
          # https://cran-archive.r-project.org/bin/windows/base/old/
          #
          # Newer R
          # CHANGES IN R VERSION 2.12.0
          # A sub-architecture is used for 32-bit (i386) as well as 64-bit (x64) builds.
          # The 32- and 64-bit distributions have been merged.
          # cran-archive.r-project.org/bin/windows/base/old/2.12.0/CHANGES.R-2.12.0.html
          # https://cran-archive.r-project.org/bin/windows/base/old/2.12.0/
          # https://cran-archive.r-project.org/bin/windows/base/old/2.11.1/
          #
          if([int]"${{ env.rversionlong }}" -ge 21200 ) {
            ${env:rversionurl} = "https://cran.r-project.org/bin/windows/base/old/${{ matrix.rversion }}/R-${{ matrix.rversion }}-win.exe"
            ${env:rinstexe} = "${env:GITHUB_WORKSPACE}\R-${{ matrix.rversion }}-win.exe"
          }
          # Old R
          if([int]"${{ env.rversionlong }}" -ge 21100 -and [int]"${{ env.rversionlong }}" -lt 21200 ) {
            ${env:rversionurl} = "https://cran.r-project.org/bin/windows/base/old/${{ matrix.rversion }}/R-${{ matrix.rversion }}-win${{ env.bit }}.exe"
            ${env:rinstexe} = "${env:GITHUB_WORKSPACE}\R-${{ matrix.rversion }}-win${{ env.bit }}.exe"
          }
          # Older R - Only R for Windows of x86 - "bit" is only "32"
          if( [int]"${{ env.rversionlong }}" -ge 20200 -and [int]"${{ env.rversionlong }}" -lt 21100 ) {
            ${env:rversionurl} = "https://cran.r-project.org/bin/windows/base/old/${{ matrix.rversion }}/R-${{ matrix.rversion }}-win${{ env.bit }}.exe"
            ${env:rinstexe} = "${env:GITHUB_WORKSPACE}\R-${{ matrix.rversion }}-win${{ env.bit }}.exe"
          }
          # Oldest R - Only R for Windows of x86
          if( [int]"${{ env.rversionlong }}" -ge 10602 -and [int]"${{ env.rversionlong }}" -lt 20200 ) {
            ${env:rversionurl} = "https://cran.r-project.org/bin/windows/base/old/${{ matrix.rversion }}/" + "rw" + "${env:rmajor}" +"${env:rminor}".PadLeft(2,"0") + "${env:rpatch}"  + ".exe"
            ${env:rinstexe} = "${env:GITHUB_WORKSPACE}\" + "rw" + "${env:rmajor}" +"${env:rminor}".PadLeft(2,"0") + "${env:rpatch}"  + ".exe"
          }

          Set-EnvVar "rversionurl=${env:rversionurl}"
          # After download of R, this is the R installation exe.
          Set-EnvVar "rinstexe=${env:rinstexe}"

          # "mingw" - "make installcheck" does not like spaces
          ${env:R_HOME} = "C:\RINSTALL"
          Set-EnvVar "R_HOME=${env:R_HOME}"

        # NOTE - cygwin DOES HAVE R in the repository.
      - name: cygwin R from a Repository location
        if: ${{ matrix.os == 'windows-latest' && ( env.compiler_style = 'mingw' || env.compiler_style = 'msvc' ) && matrix.rversion != '' }}
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          ${env:cyg_setup_download_url}="http://cygwin.com/setup-${{ env.CYG_ARCH }}.exe"
          Set-EnvVar "cyg_setup_download_url=${env:cyg_setup_download_url}"
          if("${{ env.Platform }}" = "x64" ) {
            ${env:cyg_mirror}="https://mirrors.kernel.org/sourceware/cygwin/"
          }
          # last "x86" of December 2022"
          if("${{ env.Platform }}" = "x86" ) {
            ${env:cyg_mirror}="http://mirrors.kernel.org/sourceware/cygwin-archive/20221123/"
          }
          Set-EnvVar "cyg_mirror=${env:cyg_mirror}"
          ${env:R_HOME}="${{ env.CYG_ROOT }}\lib\R"
          Set_EnvVar "R_HOME=${env:R_HOME}"

      # General case
      # R for Windows does Sub-Architectures
      # Note - cygwin does not use "R Sub-Architectures"
      # See cran-archive.r-project.org/bin/windows/base/old/2.12.0/CHANGES.R-2.12.0.html
      - name: Windows mingw and msvc R R_ARCH Sub-Architectures
        if: ${{ matrix.os == 'windows-latest' && ( env.compiler_style = 'mingw' || env.compiler_style = 'msvc' ) && matrix.rversion != '' }}
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          if([int]"${{ env.rversionlong }}" -ge 21200) {
            if ("${{ env.Platform }}" -eq "x64") { ${env:R_ARCH} =  "/x64" }
            # includes "msys" case
            if ("${{ env.Platform }}" -eq "x86") { ${env:R_ARCH} =  "/i386" }
            Set-EnvVar "R_ARCH=${env:R_ARCH}"
         }
 
      - name: Windows mingw - to/that have the "pg" binaries installed in the default (well-known) system location
        if: ${{ matrix.os == 'windows-latest' && env.compiler_style == 'mingw' && matrix.pg == '' }}
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          Set-EnvVar "pg_binaries_installed_in_system_location=true"
          # eventually use the most current Windows "mingw" "pg"
          # or
          # eventually install the latest "pg" from the repository

      - name: Windows mingw -  Windows mingw - to/that have the "pg" binaries compiled from source
        if: ${{ matrix.os == 'windows-latest' && env.compiler_style == 'mingw' && matrix.pg != '' }}
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          Set-EnvVar "pg_binaries_compiled_from_source=true"

      - name: Windows mingw - set PGROOT
        if: ${{ matrix.os == 'windows-latest' && env.compiler_style == 'mingw' && env.pg_binaries_installed_in_system_location == '' }}
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          # Nix does not like spaces
          ${env:PGROOT} = "C:\PGINSTALL"
          Set-EnvVar "PGROOT=${env:PGROOT}"

      - name: Install Windows mingw Software
        if: ${{ matrix.os == 'windows-latest' && env.compile_styler = 'mingw' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.compiler}}
          update: true
          #
          # https://www.postgresql.org/docs/16/install-requirements.html
          # https://www.postgresql.org/docs/16/git.html
          #
          # Is "--without-icu" ignored in pg 15 and lower? Yes, ignored.
          #
          # git - after "icu-devel", "git" was removed - Instead, I will use "Git for Windows"
          #
          # NOTE
          # 7zip 22.01 (JUN 2023)
          # https://github.com/actions/runner-images/blob/main/images/win/Windows2022-Readme.md
          #
          # Also, I will still install mingw p7zip.  I will be compressing from within the mingw SHELL.
          #
          # Also, tar and zstd are needed for "actions/cache@v3.3.1"
          #
          install: >-
            meson
            make
            gcc
            tar
            gzip
            readline
            zlib
            icu-devel
            flex
            bison
            perl
            winpty
            p7zip
            tar
            zstd

      # Needs "tar" and "zstd"
      #
      # The cache is scoped to the key, version, and branch.
      # The default branch cache is available to other branches.
      #
      # Once the 10GB limit is reached,
      # older caches will be evicted based on when the cache was last accessed.
      #
      - name: Cache R-x.y.z Windows Installer Exe
        if: ${{ matrix.os == 'windows-latest' && ( env.compiler_style = 'mingw' || env.compiler_style = 'msvc' ) && matrix.rversion != '' }}
        id: cache-R.windows.installer.exe
        uses: actions/cache@v3.3.1
        with:
          path: R-${{ matrix.rversion }}-win.exe
          key:  R-${{ matrix.rversion }}-win.exe
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 1

      - name: Download R for Windows R-x.y.z R-rmajor.rminor.rpatch
        if: ${{ matrix.os == 'windows-latest' && ( env.compiler_style = 'mingw' || env.compiler_style = 'msvc' ) && matrix.rversion != '' }}
        uses: suisei-cn/actions-download-file@v1.3.0
        id: downloadfileRforWindows 
        name: Download R for Windows
        with:
          url: ${{ env.rversionurl }}

      - name: Install R for Windows R-x.y.z R-rmajor.rminor.rpatch
        if: ${{ matrix.os == 'windows-latest' && ( env.compiler_style = 'mingw' || env.compiler_style = 'msvc' ) && matrix.rversion != '' }}
        run: |
          function Start-App  {param($X,$Y) Start-Process -NoNewWindow -FilePath "$X" -ArgumentList $Y }
          Start-App "${{ env.rinstexe }}" "/VERYSILENT", "/DIR=${{ env.R_HOME }}",  "/NOICONS", "/TASKS="

      - name: Windows mingw - Downloading and Placing "pg" from the "repository" binaries
        if: ${{ matrix.os == 'windows-latest' && env.compiler_style == 'mingw' && env.pg_binaries_installed_in_system_location == 'true' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.compiler }}
          update: true
          install: postgresql
       #

      # TODO
      # if env.compiler_style = 'msvc'
      # if "pg" includes a dot ".", then 
      #  .1 download "pg" binaries from EnterpriseDB
      #  .2 install  "pg" binaries from EnterpriseDB
      #  .3 Set-EnvVar "pg_binaries_installed=true"

      - name: Downloading "pg" source code
        if: ${{ env.pg_binaries_compiled_from_source = 'true' }}
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          echo Using Git
          echo Downloading pg source code
          #
          # If one is not getting the "pg" from a repository,
          # then One must get pg from source [and then eventually compile pg into binaries].
          #
          # avoid an error
          git config --global advice.detachedHead false
          # recommended - github.com/msys2/setup-msys2/tree/v2
          git config --global core.autocrlf
          #
          # git commit - alphanumeric and all lowercase letters (slower download)
          #
          ${PGSOURCE} = "C:\projects\postgresql"
          Set-EnvVar "PGSOURCE=${PGSOURCE}"
          #
          if("{{ matrix.pghint }}" -eq "commit") {
            git clone -q                                     "https://git.postgresql.org/git/postgresql.git" "${PGSOURCE}"
            pushd "${PGSOURCE}"
            git checkout -q                  ${{ matrix.pg }} -b ${{ matrix.pg }}
            git branch
            echo ${{ matrix.pg }}
            popd
          #
          # git branch or tag(detached head)
          # PostgreSQL case - git branches and tags have at least one capital letter - but expect mostly CAPS
          #
          } else {
            git clone -q --depth 1 --branch  ${{ matrix.pg }} "https://git.postgresql.org/git/postgresql.git" "${PGSOURCE}"
            pushd "${PGSOURCE}"
            git branch
            echo ${{ matrix.pg }}
            popd
          }
          pushd "${PGSOURCE}"
          dir
          popd

      - name: Windows Set Same Locations
        if: matrix.os == 'windows-latest'
        # GITHUB_WORKSPACE="D\a\githubactionstest\githubactionstest"
        # https://docs.github.com/en/actions/learn-github-actions/variables
        run: |
          #
          # Make these locations to be exactly the same.
          # GITHUB_WORKSPACE = C\projects\plr = C\projects\postgresql\contrib\plr
          #
          mkdir "C:\projects"
          pushd "C:\projects"
          cmd /c mklink /J   plr                    ${env:GITHUB_WORKSPACE}
          popd
          # if not already done by the "pg_binaries_compiled_from_source=true"
          #     "C:\projects\postres"
          mkdir "${{ env.PGSOURCE }}"
          pushd "${{ env.PGSOURCE }}"
          cmd /c mklink /J            contrib\plr   ${env:GITHUB_WORKSPACE}
          popd

      # Workflow syntax for GitHub Actions
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_iddefaultsrun

      - name: Windows mingw - Testing Powershell shell
        if: ${{ matrix.os == 'windows-latest' && env.compiler_style == 'mingw' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.compiler }}
          updated: true
        shell: msys2 {0}
        run: |
          msys2 -c 'set -x -v -e; uname -a'
          msys2 -c 'set -x -v -e; echo whoami $(whoami)'
          msys2 -c 'set -x -v -e; echo id $(id)'
          msys2 -c 'set -x -v -e; echo pwd $(pwd)'
          msys2 -c 'set -x -v -e; echo SHELL ${SHELL}'

      # Enable "tmate" debugging of manually-triggered workflows if the input option was provided
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}

      - name: Before the Build - Windows Set OS Environment Variabless
        if: matrix.os == 'windows-latest'
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          echo Set OS Environment Variables
          ${env:pg}            = "${{ matrix.pg }}"
          Set-EnvVar "pg=${env:pg}"
          ${env:Configuration} = "${{ matrix.Configuration }}"
          Set-EnvVar "Configuration=${env:Configuration}"

          # Not                   "matrix.Platform"
          ${env:Platform}      = "${{ env.Platform }}"
          Set-EnvVar "Platform=${env:Platform}"

          ${env:os}            = "${{ matrix.os }}"
          Set-EnvVar "os=${env:os}"
          ${env:rversion}      = "${{ matrix.rversion }}"
          Set-EnvVar "rversion=${env:rversion}"
          ${env:compiler}      = "${{ matrix.compiler }}"
          Set-EnvVar "compiler=${env:compiler}"
          ${env:pghint}        = "${{ matrix.pghint }}"
          Set-EnvVar "pghint=${env:pghint}"
          ${env.githubcache}   = "${{ matrix.githubcache }}"
          Set-EnvVar "githubcache=${env:githubcache}"
          ${env:builder}       = "${{ matrix.builder }}"
          Set-EnvVar "builder=${env:builder}"

      - name: Before the Build - Ubuntu or MacOS - Set OS Environment Variabless
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
        env:
        run: |
          echo Set OS Environment Variables
          ${pg}            = "${{ matrix.pg }}"
          echo "pg=${pg}" > ${GITHUB_ENV}
          ${Configuration} = "${{ matrix.Configuration }}"
          echo "Configuration=${Configuration}" > ${GITHUB_ENV}

          # Not               "matrix.Platform"
          ${Platform}      = "${{ env.Platform }}"
          echo "Platform=${Platform}" > ${GITHUB_ENV}

          ${os}            = "${{ matrix.os }}"
          echo "os=${os}" > ${GITHUB_ENV}
          ${rversion}      = "${{ matrix.rversion }}"
          echo "rversion=${rversion}" > ${GITHUB_ENV}
          ${compiler}      = "${{ matrix.compiler }}"
          echo "compiler=${compiler}" > ${GITHUB_ENV}
          ${pghint}        = "${{ matrix.pghint }}"
          echo "pghint=${pghint}" > ${GITHUB_ENV}
          ${githubcache}   = "${{ matrix.githubcache }}"
          echo "githubcache=${githubcache}" > ${GITHUB_ENV}
          ${builder}       = "${{ matrix.builder }}"
          echo "builder=${builder}" > ${GITHUB_ENV}

      - name: Before the Build - Windows Print Variabless
        if: matrix.os == 'windows-latest'
        env:
          RUNNER_CONTEXT_JSON: ${{ toJson(runner) }}
          GITHUB_CONTEXT_JSON: ${{ toJSON(github) }}
          ENV: ${{ toJSON(vars) }} # load env. variables into OS Environment Variables (and Platform)
          SECRETS_JSON: ${{ toJSON(secrets) }}
          MATRIX_JSON: ${{ toJSON(matrix) }}
        run: |
          echo Print runner context global data JSON
          echo "${env:RUNNER_CONTEXT_JSON}"
          echo Print github context global data JSON
          echo "${env:GITHUB_CONTEXT_JSON}"
          echo Print env. vars JSON
          echo "${env:ENV}" # null
          echo Print secrets JSON
          echo "${env:SECRETS_JSON}"
          echo Print matrix JSON
          echo "${env:MATRIX_JSON}"
          echo Print the PATH variable
          "${env:PATH}".Split(';')
          echo Print the OS Environment variables
          Get-ChildItem env:

      - name: Before the Build - Ubuntu or MacOS - Print Variabless
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
        env:
          RUNNER_CONTEXT_JSON: ${{ toJson(runner) }}
          GITHUB_CONTEXT_JSON: ${{ toJSON(github) }}
          ENV: ${{ toJSON(vars) }} # load env. variables into OS Environment Variables (and Platform)
          SECRETS_JSON: ${{ toJSON(secrets) }}
          MATRIX_JSON: ${{ toJSON(matrix) }}
        run: |
          echo Print runner context global data JSON
          echo "${RUNNER_CONTEXT_JSON}"
          echo Print github context global data JSON
          echo "${GITHUB_CONTEXT_JSON}"
          echo Print env. vars JSON
          echo "${ENV}" # null
          echo Print secrets JSON
          echo "${SECRETS_JSON}"
          echo Print matrix JSON
          echo "${MATRIX_JSON}"
          echo Print the PATH variable
          echo "${PATH}"
          echo Print the OS Environment variables
          export

      - name: make - Build
        if: ${{ matrix.os == 'windows-latest' && ( env.compiler_style == 'mingw' ||  env.compiler_style == 'cygwin' ) && matrix.builder = 'make' }}
        env:
          # convert env. to OS Environment Variables
          VARS: ${{ toJSON(vars) }}
        run: |
          function Start-App  {param($X,$Y) Start-Process -NoNewWindow -FilePath "$X" -ArgumentList $Y }

          Start-App "${{ env.SHELL }}" "-lc", "'/c/projects/plr/build_script.sh'"
          # init.sh may modify PGROOT but PGROOT is not anymore used outside of the .sh files

      - name: meson - Build
        if: ${{ matrix.os == 'windows-latest' && ( env.compiler_style == 'mingw' ||  env.compiler_style == 'cygwin' ) && matrix.builder = 'meson' }}
        uses: BSFishy/meson-build@v1.0.3
        with:
          action: build
          options: --verbose

      - name: meson - Install
        if: ${{ matrix.os == 'windows-latest' && ( env.compiler_style == 'mingw' ||  env.compiler_style == 'cygwin' ) && matrix.builder = 'meson' }}
        uses: BSFishy/meson-build@v1.0.3
        with:
          action: install
          options: --verbose

      - name: make - Test
        if: ${{ matrix.os == 'windows-latest' && ( env.compiler_style == 'mingw' ||  env.compiler_style == 'cygwin' ) && matrix.builder = 'make' }}
        env:
          # convert env. to OS Environment Variables
          VARS: ${{ toJSON(vars) }}
        run: |
          function Start-App  {param($X,$Y) Start-Process -NoNewWindow -FilePath "$X" -ArgumentList $Y }

          Start-App "${{ env.SHELL }}" "-lc", "'/c/projects/plr/test_script.sh'"
          # init.sh may modify PGROOT but PGROOT is not anymore used outside of the .sh files

      - name: meson - Test 
        if: ${{ matrix.os == 'windows-latest' && ( env.compiler_style == 'mingw' ||  env.compiler_style == 'cygwin' ) && matrix.builder = 'meson' }}
        uses: BSFishy/meson-build@v1.0.3
        with:
          action: test
          setup-options: -Db_coverage=true
          options: --verbose

      - name: make - Archive
        if: ${{ matrix.os == 'windows-latest' && ( env.compiler_style == 'mingw' ||  env.compiler_style == 'cygwin' ) && matrix.builder = 'make' }}
        env:
          # convert env. to OS Environment Variables
          VARS: ${{ toJSON(vars) }}
        run: |
          function Set-EnvVar {param($X)     Add-Content -Path ${env:GITHUB_ENV} -Value "$X"}
          function Start-App  {param($X,$Y) Start-Process -NoNewWindow -FilePath "$X" -ArgumentList $Y }

          Start-App "${{ env.SHELL }}" "-lc", "'/c/projects/plr/archive_script.sh'"
          # init.sh may modify  "PGROOT", "bit", or "Platform", but these are not anymore used outside of the .sh files.
          # archive_script.sh may modify "rversion" or "pgversion", but these are not anymore used outside of the .sh files.
          # archive_script.sh will create "var7z" and maybe "varpg7z". The .env has been modified inside the .sh files

      - name: meson - Archiving
        if: ${{ matrix.os == 'windows-latest' && ( env.compiler_style == 'mingw' ||  env.compiler_style == 'cygwin' ) && matrix.builder = 'meson' }}
        run: |
          echo Archiving
          echo TODO
        env:
          var7z: ${{ env.var7z }}
          varpg7z : ${{ env.varpg7z }}
          githubcache :${{ matrix.githubcache }}

      # Compress build for windows.  (Instead let 7z in "Windows Self Compressing Artifacts" compress using 7z)
      # https://github.com/AndreMikulec/testapp/blob/f13d725a9fcfa5daff3d25ff00f9899b417cbc5d/.github/workflows/build_everything.yml#L207

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.var7z }}
          path: |
            ${{ env.var7z }}

      # required permissions for the action specified (which is contents: write)
      - name: Release
        if: github.ref_type == 'tag'
        uses: ncipollo/release-action@v1.12.0
        with:
          allowUpdates: true
          replacesArtifacts: true
          commit: ${{ env.GITHUB_SHA }}
          tag: ${{ env.USER_GITHUB_REF_NAME }}
          artifacts: "${{ env.var7z }}"
          token: ${{ secrets.PLR_ACTIONS_CREATE_RELEASE_REPO_SECRET }}
        env:
          USER_GITHUB_SHA: ${{ github.sha }}
          USER_GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Release
        if: ${{ github.ref_type == 'tag' && matrix.githubcache == 'true' }}
        uses: ncipollo/release-action@v1.12.0
        with:
          allowUpdates: true
          replacesArtifacts: true
          commit: ${{ env.GITHUB_SHA }}
          tag: 0.0.0.0.0.GITHUBCACHE
          artifacts: "${{ env.varpg7z }}"
          token: ${{ secrets.PLR_ACTIONS_CREATE_RELEASE_REPO_SECRET }}
        env:
          USER_GITHUB_SHA: ${{ github.sha }}
          USER_GITHUB_REF_NAME: ${{ github.ref_name }}



