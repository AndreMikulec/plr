
#
# May 18, 2020
# Migrate From Travis CI to GitHub Actions
# avatar-bdemers.jpg
# Brian Demers
# First Steps to GitHub Actions
# https://developer.okta.com/blog/2020/05/18/travis-ci-to-github-actions
#

#
# Migrating from Travis CI to GitHub Actions
# https://docs.github.com/en/actions/learn-github-actions/migrating-from-travis-ci-to-github-actions
#

#
# Github Actions Cheat Sheet
# https://github.github.io/actions-cheat-sheet/actions-cheat-sheet.pdf
#

#
# Appveyor has a special YAML validator, but Github Actions does not
# YAML Lint
# http://www.yamllint.com/
#

#
# https://docs.github.com/en/actions/reference/events-that-trigger-workflows
#
name: plr CI
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PG: ${{ matrix.pg }}

    # https://docs.github.com/en/actions/learn-github-actions/managing-complex-workflows
    #
    # Expressions in job.continue-on-error
    # https://github.blog/changelog/2020-04-15-github-actions-new-workflow-features/
    strategy:
      matrix:
        #
        # https://wiki.ubuntu.com/Releases
        # e.g. Focal Fossa
        # March 2021
        # file "Package"
        # http://apt.postgresql.org/pub/repos/apt/dists/focal-pgdg/main/binary-amd64/
        #
        pg: [13, 12, 11, 10, 9.6, 9.5]
        include:
          # simple working example
          # https://github.com/facelessuser/soupsieve/blob/ec7a491d11e69de18dd733e145efe10e3444ede8/.github/workflows/build.yml
          - pg: 13
            continue-on-error: true
          - pg: 12
            continue-on-error: true
          - pg: 11
            continue-on-error: true
          - pg: 10
            continue-on-error: true
          - pg: 9.6
            continue-on-error: true
          - pg: 9.5
            continue-on-error: true

    steps:
      - name: Echo site details
        run: echo PG $PG

      # https://docs.github.com/en/actions/quickstart
      # https://github.com/actions/checkout
      #
      # Checks out a copy of your repository on the ubuntu-latest machine
      #
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Before Script
        env:
          PG: ${{ matrix.pg }}
        run: |
          echo Building plr with PostgreSQL $PG
          #
          # https://wiki.ubuntu.com/Releases
          # e.g. Focal Fossa
          # March 2021
          # file "Package"
          # http://apt.postgresql.org/pub/repos/apt/dists/focal-pgdg/main/binary-amd64/
          #
          # echo Name of Ubuntu version:
          # $(lsb_release -a)
          # Ubuntu 20.04.2 LTS Release: 20.04 Codename: focal

          #
          # echo Who I Am
          # id
          # uid=1001(runner) gid=121(docker) groups=121(docker),4(adm),101(systemd-journal)
          #
          # echo HOME: $HOME
          #            /home/runner
          #
          # echo Where I Am
          # pwd
          # /home/runner/work/plr/plr
          #
          # echo What Contents I Have
          # ls -alrt
          # (plr directory contents)

          #
          # Consider instead?
          # image: postgres
          # https://docs.github.com/en/actions/learn-github-actions/managing-complex-workflows
          #
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update -qq
          sudo apt-get install -qq r-base-dev acl
          sudo /etc/init.d/postgresql stop
          sudo apt-get remove --purge postgresql\*
          sudo rm -rf /etc/postgresql /var/lib/postgresql
          sudo apt-get install postgresql-$PG
          #
          # postgres Is Not in the Path
          #

          #
          # Where Is postgres
          #
          # find / -name '*postgres' -print 2>/dev/null
          #
          # /usr/lib/postgresql/13/lib/bitcode/postgres
          # /usr/lib/postgresql/13/bin/postgres
          # /home/linuxbrew/.linuxbrew/Homebrew/Library/Taps/homebrew/homebrew-core/Aliases/postgres
          #
          sudo apt-get install postgresql-server-dev-$PG
          echo 'local   all             postgres                                trust' | sudo tee /etc/postgresql/$PG/main/pg_hba.conf > /dev/null
          # In Travis, the job runs under "travis".
          # In Github Extensions, the job runs under "runner".
          # In Github Extensions, the HOME value /home/runner
          # In Travis "sudo" is not required. In Github Extensions, "sudo" is required.
          sudo setfacl -Rm u:postgres:rwx,d:u:runner:rwx /home/runner
          sudo pg_ctlcluster $PG main reload
          #
          # Makefile:18: ../../src/Makefile.global: No such file or directory
          # Makefile:19: /contrib/contrib-global.mk: No such file or directory make:
          # *** No rule to make target `/contrib/contrib-global.mk'. Stop. #65
          # 2016
          # https://github.com/laurenz/oracle_fdw/issues/65
          #
          # METHOD 1
          # build oracle_fdw in a PostgreSQL source tree,
          # you'll have to copy it to contrib/
          # and run make NO_PGXS=1 from there.
          #
          # METHOD 2
          # Unless you have a good reason to do this,
          # I'd recommend that you run plain make
          # and
          # make sure that pg_config is on the PATH.
          # . . .
          # Untar PL/R wherever you prefer. (and make sure that "pg_config" is in the PATH)
          # cd plr
          # USE_PGXS=1 make
          # USE_PGXS=1 make install
          #
          # https://www.joeconway.com/plr/doc/plr-install.html

          # /usr/share/pgsql/contrib
          # https://serverfault.com/questions/427109/contrib-directory-in-postgresql-9-1
          #
          # Where Is contrib
          #
          # find / -name '*contrib' -print 2>/dev/null
          # /usr/share/postgresql/13/contrib

          # What Is In contrib
          # ls -alrt /usr/share/postgresql/${PG}/contrib
          # almost empty

          # What Is In bin
          # ls -alrt /usr/lib/postgresql/${PG}/bin
          # very full

          #
          # Running R in batch mode on Linux
          # 2014
          # http://www.cureffi.org/2014/01/15/running-r-batch-mode-linux/
          #
          # echo Where Is R for Ubuntu
          # which R
          # /usr/bin/R

          # R_HOME setting on Linux
          # file.path(R.home("share"),"texmf")
          # 2014
          # https://r.789695.n4.nabble.com/R-HOME-setting-on-Linux-td4694413.html
          #
          # Where is the R Home directory
          # R -e writeLines(R.home())
          # R --help
          # RHOME			Print path to R home directory and exit
          # R RHOME
          # /usr/lib/R

          # Not Required
          #
          # copy it to contrib/ - Required only when building from the Source Tree
          #
          ### sudo setfacl -Rm u:postgres:rwx,d:u:runner:rwx /usr/share/postgresql/${PG}/contrib
          ### sudo mkdir -p                                  /usr/share/postgresql/${PG}/contrib/plr
          ### sudo chown runner:docker                       /usr/share/postgresql/${PG}/contrib/plr
          ### sudo setfacl -Rm u:postgres:rwx,d:u:runner:rwx /usr/share/postgresql/${PG}/contrib/plr
          ### cp -r -p *                                     /usr/share/postgresql/${PG}/contrib/plr
          ### sudo setfacl -Rm u:postgres:rwx,d:u:runner:rwx /usr/share/postgresql/${PG}/contrib/plr
          ### #
          ### cd                                             /usr/share/postgresql/${PG}/contrib/plr

          #
          # make sure that "pg_config" is on the PATH
          # Not In The Path - Unless I Put it There
          #
          ### Seems, in this case, not required
          ###
          ### export PATH=/usr/lib/postgresql/${PG}/bin:$PATH
          ###
          #
          # echo $PATH
          # /usr/lib/postgresql/13/bin: . .  /usr/bin

          # which pg_config
          # /usr/lib/postgresql/13/bin/pg_config

          # What Is It About PostgreSQL
          # pg_config
          # BINDIR = /usr/lib/postgresql/13/bin
          # DOCDIR = /usr/share/doc/postgresql-doc-13
          # HTMLDIR = /usr/share/doc/postgresql-doc-13
          # INCLUDEDIR = /usr/include/postgresql
          # PKGINCLUDEDIR = /usr/include/postgresql
          # INCLUDEDIR-SERVER = /usr/include/postgresql/13/server
          # LIBDIR = /usr/lib/x86_64-linux-gnu
          # PKGLIBDIR = /usr/lib/postgresql/13/lib
          # LOCALEDIR = /usr/share/locale
          # MANDIR = /usr/share/postgresql/13/man
          # SHAREDIR = /usr/share/postgresql/13
          # SYSCONFDIR = /etc/postgresql-common
          # PGXS = /usr/lib/postgresql/13/lib/pgxs/src/makefiles/pgxs.mk
          # CONFIGURE =  '--build=x86_64-linux-gnu' '--prefix=/usr' '--includedir=${prefix}/include'
          # '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' '--sysconfdir=/etc'
          # '--localstatedir=/var' '--disable-silent-rules' '--libdir=${prefix}/lib/x86_64-linux-gnu'
          # '--runstatedir=/run' '--disable-maintainer-mode' '--disable-dependency-tracking'
          # '--with-icu' '--with-tcl' '--with-perl' '--with-python' '--with-pam' '--with-openssl'
          # '--with-libxml' '--with-libxslt' 'PYTHON=/usr/bin/python3'
          # '--mandir=/usr/share/postgresql/13/man' '--docdir=/usr/share/doc/postgresql-doc-13'
          # '--sysconfdir=/etc/postgresql-common' '--datarootdir=/usr/share/'
          # '--datadir=/usr/share/postgresql/13' '--bindir=/usr/lib/postgresql/13/bin'
          # '--libdir=/usr/lib/x86_64-linux-gnu/' '--libexecdir=/usr/lib/postgresql/'

          # echo What OS Environment Variables - Is R_HOME Here
          # export
          # no R_HOME found

          echo BEGIN SCRIPT

      - name: Script
        run: |
          sudo pg_lsclusters
          export USE_PGXS=1
          SHLIB_LINK=-lgcov PG_CPPFLAGS="-fprofile-arcs -ftest-coverage -O0" make
          # USE_PGXS=1 is not required in Travis, and it is required in Github Actions
          sudo USE_PGXS=1 make install
          /usr/lib/postgresql/$PG/bin/pg_config
          psql --version
          make installcheck PGUSER=postgres || (cat regression.diffs && false)

      - name: After Success
        #
        # Consider instead?
        # https://www.cyberciti.biz/faq/bash-get-exit-code-of-command/
        #
        # Job status check functions
        #   Returns true when none of the previous steps have failed or been canceled.
        # https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#job-status-check-functions
        #
        # success(), returns true when none of the previous steps have failed or been canceled.
        if: ${{ success() }}
        # Uploads code coverage to codecov.io
        run: bash <(curl -s https://codecov.io/bash)


