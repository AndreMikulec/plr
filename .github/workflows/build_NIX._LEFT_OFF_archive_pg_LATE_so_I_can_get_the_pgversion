
env:
  # Enabling runner diagnostic logging
  ACTIONS_RUNNER_DEBUG: true
  # Enabling step debug logging
  ACTIONS_STEP_DEBUG: true

name: plr CI NIX
contents: write

# IN DEVELOPMENT RIGHT NOW
# on: [push, pull_request]

jobs:

  build_NIX:

    name: ${{ matrix.os }} ${{ matrix.pg }} ${{ matrix.Platform}} ${{ matrix.Configuration }} ${{ matrix.rversion }} ${{ matrix.Compiler}}
    needs: prereq_checks
    runs-on: ${{ matrix.os }}
    defaults:
      run:
    strategy:
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
      matrix:
        include:

            # The matrix variable "pg" may be the word "repository".
            # Git branch, Git tag, Git commit("${env:pghint}" -eq "commit").
            #
            # If the matrix variable "pghint" is "commit" then pg is a commit and not a tag and not a branch.

            # If "pg" is "repository",then do not compile pg from source.
            # [Later, instead get the pg binaries from a repository.]
            #
            # The derived environment variable "pgversion" (the exact internal "pg version")
            # will be determined by SQL.
            # This is used in the asset name.

            # If the matrix variable "compiler" is "mingw64" or "mingw32", then "Platform" is ignored.

#           - pg: repository
#             Configuration: Debug
#             Platform: x64
#             os: windows-latest
#             rversion: 4.2.3


          - pg: repository
            Configuration: Debug
            Platform: x64
            os: windows-latest
            rversion: 4.3.1
            compiler: mingw64


#           - pg: REL_15_3
#             Configuration: Debug
#             Platform: x64
#             os: windows-latest
#             rversion: 4.2.3
#             compiler: mingw64


          - pg: REL_15_3
            Configuration: Debug
            Platform: x64
            os: windows-latest
            rversion: 4.3.1
            compiler: mingw64


#           - pg: REL_16_BETA1
#             Configuration: Debug
#             Platform: x64
#             os: windows-latest
#             rversion: 4.2.3
#             compiler: mingw64

#
#           - pg: REL_16_BETA1
#             Configuration: Debug
#             Platform: x64
#             os: windows-latest
#             rversion: 4.3.1
#             compiler: mingw64

#
#           - pg: master
#             Configuration: Debug
#             Platform: x64
#             os: windows-latest
#             rversion: 4.2.3
#             compiler: mingw64

#
#           - pg: master
#             Configuration: Debug
#             Platform: x64
#             os: windows-latest
#             rversion: 4.3.1
#             compiler: mingw64

#
#           - pg: master
#             Configuration: Debug
#             Platform: x64
#             os: windows-latest
#             rversion: 4.3.1
#             compiler: mingw64


    steps:


      - name: Windows System
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          systeminfo

      - name: Windows Powershell add Functions
        if: matrix.os == 'windows-latest'
        run: |
          Add-Content -Path $profile -Value "function Set-EnvVar {param(`$X)     Add-Content -Path `${env:GITHUB_ENV} -Value `"`$X`"}"
          Add-Content -Path $profile -Value "function Start-App  {param(`$X,`$Y) Start-Process -NoNewWindow -FilePath `"`$X`" -ArgumentList `$Y }"

      - name: Windows Shortened Git Commit Environment Variable
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          rem FIX_THIS - add this to the asset OUTPUT name
          echo USER_SHA ${{ env.USER_SHA }}
          echo GITHUB_SHA ${{ env.GITHUB_SHA }}
          set GITHUB_SHA=${{ env.GITHUB_SHA }}
          rem
          set gitrevshort=%GITHUB_SHA:~0,8%
          echo gitrevshort %gitrevshort%
          printf "gitrevshort=%gitrevshort%" >> %GITHUB_ENV%

      - name: Ubuntu Shortened Git Commit Environment Variable
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os = 'macos-latest' }}
        run: |
          rem FIX_THIS - add this to the asset OUTPUT name
          echo USER_SHA ${{ env.USER_SHA }}
          echo GITHUB_SHA ${{ env.GITHUB_SHA }}
          export GITHUB_SHA=${{ env.GITHUB_SHA }}
          #
          export gitrevshort=${GITHUB_SHA:0:8}
          echo gitrevshort ${gitrevshort}
          echo "gitrevshort=%gitrevshort%" >> $GITHUB_ENV

      - name: Windows Compiler Style Variables
        if: matrix.os == 'windows-latest'
        run: |
          #
          # NOTE - DOES NOT use the "Platform" matrix variable to determine 64 or 32
          # to be compatible with "msys2/setup-msys2@v2"
          #
          if ( "${{ matrix.compiler }}" -eq "mingw64" ||  "${{ matrix.compiler }}" -eq "mingw32" }} ){
            ${env:compiler_style} = "mingw"
            Set-EnvVar "compiler_style=${env:compiler_style}"
          }

          # NOTE - Instead uses the "Platform" matrix variable to determine 64 or 32
          # Later, 64 or 32 will be determined.
          if ( "${{ matrix.compiler }}" -eq "cygwin" ){
            ${env:compiler_style} = "cygwin"
            Set-EnvVar "compiler_style=${env:compiler_style}"
          }

      - name: Windows and Compiler Style MINGW Environment Variables and programs
      # 64 or 32 will be determined.
        if: ${{ matrix.os == 'windows-latest' && env.compiler_style = 'mingw' }}
        run: |
          # MINGW Used in the absolute path name of msys__
          if("${{ matrix.compiler}}" -eq "mingw64") { ${env:bit} = "64" }
          if("${{ matrix.compiler}}" -eq "mingw32") { ${env:bit} = "32" }
          Set-EnvVar "bit=${env:bit}"

      - name: Windows and Compiler Style CYGWIN Environment Variables and programs
      # 64 or 32 will be determined.
      # 32 bit cygwin is considerted to b "no BIT"
        if: ${{ matrix.os == 'windows-latest' && env.compiler_style = 'cygwin' }}
        run: |
          if("${{ matrix.Platform }}" -eq "x64") { ${env:bit} = "64" }
          if("${{ matrix.Platform }}" -eq "x86") { ${env:bit} = ""   }
          Set-EnvVar "bit=${env:bit}"

      - name: Windows Environment Application Variables and programs
        if: ${{ matrix.os == 'windows-latest' }}
        run: |

          # Windows - Curl (limited features)
          # ${env:curl} = "C:\Windows\System32\curl.exe"
          #
          # More features
          ${env:curl} = "C:\msys${env:bit}\usr\bin\curl.exe"
          Set-EnvVar "curl=${env:curl}"

          # Git 2.41.0.windows.1 (Git for Windows)
          # C\Program Files\Git\bin\git.exe
          # https://github.com/actions/runner-images/blob/main/images/win/Windows2022-Readme.md
          #
          # Never had a problem with Windows, Powershell, and Git for Windows
          #
          # ${env:git} = "C\Program Files\Git\bin\git.exe"
          # Set-EnvVar "git=${env:git}"

      - name: Windows and Compiler Style MINGW Environment Application Variables and programs
        if: ${{ matrix.os == 'windows-latest' && env.compiler_style = 'mingw' }}
        run: |

          # NOTE, "bash" comes with MINGW out of the box from msys2/setup-msys2@v2.
          # (I want to use THAT ONE)
          #
          # I do not want to use the "Git for Windows" Bash
          # Bash 5.2.15(1)-release
          # C\Program Files\Git\bin\bash.exe
          # https://github.com/actions/runner-images/blob/main/images/win/Windows2022-Readme.md
          #
          
          ${env:bash} = "C:\msys${{ env.bit }}\usr\bin\bash.exe";
          Set-EnvVar "bash=${env:bash}"

          # matrix varible compiler(mingw64) is input to msys2/setup-msys2.
          # msys2/setup-msys2  then determines MSYSTEM.
          # MSYSTEM is used in the absolute path of the msys2 binaries
          #
          # Github Action msys2/setup-msys2 that already provides
          # the environment variable MYSYSTEM.
          #
          # OSBitVersion can be used in an  msys2/setup-msys2 action.
          # This helps provide exact names in msys2 absolute binary name download.
          # see docs - https://github.com/marketplace/actions/setup-msys2
          #
          # (currently not used by this builder)
          #
          # Better that I use ${env:bit} at this point
          # if ("${{ env:MSYSTEM }}" -eq "MINGW64"){ ${env:OSBitVersion} = "x86_64"}
          # if ("${{ env:MSYSTEM }}" -eq "MINGW32"){ ${env:OSBitVersion} = "i686" }
          # Set-EnvVar "OSBitVersion=${env:OSBitVersion}"

      - name: Checkout code
        uses: actions/checkout@v3

      # R_ARCH - Used in the compilation of plr - CYGWIN does not do R sub-architectures
      - name: R R_ARCH Sub-Architectures
        if: ${{ env.compiler_style != 'cygwin' }}
        run: |
          if ("${env:MSYSTEM}" -eq "MINGW64") {${env:R_ARCH} =  "/x64"}
          if ("${env:MSYSTEM}" -eq "MINGW32") {${env:R_ARCH} = "/i386"}
          Set-EnvVar "R_ARCH=${env:R_ARCH}"

      - name: Windows Environment and R Variables and programs
        # NOTE - MINGW does NOT have R in the repository.
        # NOTE - CYGWIN DOES HAVE R in the repository.
        if: ${{ matrix.os == 'windows-latest' &&  matrix.rversion != 'repository' }}
        run: |

          # Online location of the R installer exe.
          ${env:rversionurl} = "https://cran.r-project.org/bin/windows/base/old/${{ matrix.rversion }}/R-${{ matrix.rversion }}-win.exe"
          Set-EnvVar "rversionurl=${env:rversionurl}"

          # After download of R, this is the R installation exe.
          ${env:rinstexe} = "C:\projects\R-${{ matrix.rversion }}-win.exe"
          Set-EnvVar "rinstexe=${env:rinstexe}"

          # "make installcheck" does not like spaces
          ${env:R_HOME} = "C:\RINSTALL"
          Set-EnvVar "R_HOME=${env:R_HOME}"

      - name: Windows Environment and PostgreSQL Variables and programs
        if: ${{ matrix.os == 'windows-latest' &&  matrix.pg != 'repository' }}
        run: |
          #Nix does not like spaces
          ${env:pgroot} = "C:\PGINSTALL"
          Set-EnvVar "pgroot=${env:pgroot}"

      - name: Install Windows MINGW Software
        if: ${{ matrix.os == 'windows-latest' && env.compile_styler = 'mingw' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.compiler}}
          update: true
          #
          # https://www.postgresql.org/docs/16/install-requirements.html
          # https://www.postgresql.org/docs/16/git.html
          #
          # Is "--without-icu" ignored in pg 15 and lower? Yes, ignored.
          #
          # git - after "icu-devel", "git" was removed - Instead, I will use "Git for Windows"
          #
          # NOTE
          # 7zip 22.01 (JUN 2023)
          # https://github.com/actions/runner-images/blob/main/images/win/Windows2022-Readme.md
          #
          # Also, I will still install MINGW p7zip.  I will be compressing from within the MINGW bash.
          #
          # Also, tar and zstd are needed for "actions/cache@v3.3.1"
          #
          install: >-
            make
            gcc
            tar
            gzip
            readline
            zlib
            icu-devel
            flex
            bison
            perl
            curl
            winpty
            p7zip   
            tar
            zstd

      # needs "tar" and "zstd"
      #
      # The cache is scoped to the key, version, and branch.
      # The default branch cache is available to other branches.
      # 
      # Once the 10GB limit is reached, 
      # older caches will be evicted based on when the cache was last accessed.
      #
      - name: Cache R-x.y.z Windows Installer Exe
        if: ${{ matrix.os == 'windows-latest' &&  matrix.rversion != 'repository' }}
        id: cache-R.windows.installer.exe
        uses: actions/cache@v3.3.1
        with:
          path: R-${{ matrix.rversion }}-win.exe
          key:  R-${{ matrix.rversion }}-win.exe
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 1

      - name: Windows Download R-x.y.z Installer Exe
        if: ${{ matrix.os == 'windows-latest' &&  matrix.rversion != 'repository' && steps.cache-R.windows.installer.exe.outputs.cache-hit != 'true' }}
        run: |
          if (-not (Test-Path "${{ env.rinstexe }}")) {
            Start-App "${{ env.curl }}"  "-v", "-o", "${{ env.rinstexe }}", "${{ env.rversionurl }}"
          }
          
      - name: Windows Install R-x.y.z
        if: ${{ matrix.os == 'windows-latest' &&  matrix.rversion != 'repository' }}
        run: |
          Start-App "${{ env.rinstexe }}" "/VERYSILENT", "/DIR=${{ env.R_HOME }}",  "/NOICONS", "/TASKS="

      - name: Windows MINGW - Downloading and Placing "pg" from the "repository" binaries
        if: ${{ matrix.os == 'windows-latest' && env.compiler_style == 'mingw' && matrix.pg == "repository" }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.compiler }}
          update: true
          install: postgresql

      - name: Downloading "pg" source code
        if: ${{ matrix.os == 'windows-latest' &&  matrix.pg != "repository" }}
        working-directory: projects\plr
        run: |
          echo Using Git
          echo Downloading pg source code
          #
          # If one is not getting the "pg" from a repository,
          # then One must get pg from source [and then eventually compile pg into binaries].
          #
          # avoid an error
          git config --global advice.detachedHead false
          # recommended - github.com/msys2/setup-msys2/tree/v2
          git config --global core.autocrlf
          #
          # git commit - alphanumeric and all lowercase letters (slower download)
          #
          Set-EnvVar "pgsource=C:\projects\postgresql"
          #
          if("{{ matrix.pghint }}" -eq "commit") {
            git clone -q                         https://git.postgresql.org/git/postgresql.git C:\projects\postgresql
            pushd C:\projects\postgresql
            git checkout -q                  ${{ matrix.pg }} -b ${{ matrix.pg }}
            git branch
            echo ${{ matrix.pg }}
            popd
          #
          # git branch or tag(detached head)
          # PostgreSQL case - git branches and tags have at least one capital letter - but expect mostly CAPS
          #
          } else {
            git clone -q --depth 1 --branch  ${{ matrix.pg }} https://git.postgresql.org/git/postgresql.git C:\projects\postgresql
            pushd C:\projects\postgresql
            git branch
            echo ${{ matrix.pg }}
            popd
          }
          pushd C:\projects\postgresql
          popd

      - name: Windows Set Same Locations
        if: matrix.os == 'windows-latest'
        # GITHUB_WORKSPACE="D\a\githubactionstest\githubactionstest"
        # https://docs.github.com/en/actions/learn-github-actions/variables
        run: |
          #
          # These locations are now exactly the same.
          # GITHUB_WORKSPACE = c\projects\plr = c\projects\postgresql\contrib\plr
          #
          mkdir "c:\projects"
          pushd "c:\projects"
          cmd /c mklink /J   plr                    ${env:GITHUB_WORKSPACE}
          popd
          pushd "C:\projects\postgresql"
          cmd /c mklink /J              contrib\plr ${env:GITHUB_WORKSPACE}
          popd

      # Workflow syntax for GitHub Actions
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_iddefaultsrun

      - name: Windows MINGW - Testing MINGW shell
        if: ${{ matrix.os == 'windows-latest' && env.compiler_style == 'mingw' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.compiler }}
          updated: true
        shell: msys2 {0}
        run: |
          uname -a
          whoami
          
      - name: Windows MINGW - Testing Powershell shell
        if: ${{ matrix.os == 'windows-latest' && env.compiler_style == 'mingw' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.compiler }}
          updated: true
        shell: msys2 {0}
        run: |
          msys2 -c 'uname -a'
          whoami

      - name: Build Script
        if: ${{ matrix.os == 'windows-latest' && ( env.compiler_style == 'mingw' ||  env.compiler_style == 'cygwin' ) }}
        working-directory: projects\plr
        run: |
          echo Building

          ${env:gitrevshort}   = "${{ env.gitrevshort }}"
          #
          ${env:pg}            = "${{ matrix.pg }}"
          ${env:Configuration} = "${{ matrix.Configuration }}
          ${env:Platform}      = "${{ matrix.Platform }}"
          ${env:os}            = "${{ matrix.os }}"
          ${env:rversion}      = "${{ matrix.rversion }}"
          ${env:compiler}      = "${{ matrix.compiler }}"
          #
          ${env:compiler_style} = "${{ env.compiler_style }}"
          ${env:bit}            = "${{ env.bit }}"
          ${env:R_HOME}         = "${{ env.R_HOME }}"
          ${env:R_ARCH}         = "${{ env.R_ARCH }}"
          ${env:pgsource}       = "${{ env.pgsource }}"

          Start-App "${{ env.bash }}" "-lc", "'/c/projects/plr/build_script.sh'"
          
          ${env:pgroot}    = "${{ env.pgroot }}"

      - name: Test Script
        if: ${{ matrix.os == 'windows-latest' && ( env.compiler_style == 'mingw' ||  env.compiler_style == 'cygwin' ) }}
        working-directory: projects\plr
        run: |
          echo Testing

          ${env:gitrevshort}   = "${{ env.gitrevshort }}"
          #
          ${env:pg}            = "${{ matrix.pg }}"
          ${env:Configuration} = "${{ matrix.Configuration }}
          ${env:Platform}      = "${{ matrix.Platform }}"
          ${env:os}            = "${{ matrix.os }}"
          ${env:rversion}      = "${{ matrix.rversion }}"
          ${env:compiler}      = "${{ matrix.compiler }}"
          #
          ${env:compiler_style} = "${{ env.compiler_style }}"
          ${env:bit}            = "${{ env.bit }}"
          ${env:R_HOME}         = "${{ env.R_HOME }}"
          ${env:R_ARCH}         = "${{ env.R_ARCH }}"
          ${env:pgsource}       = "${{ env.pgsource }}"
          
          Start-App "${{ env.bash }}" "-lc", "'/c/projects/plr/test_script.sh'"
          
          ${env:pgroot}    = "${{ env.pgroot }}"

      - name: Windows Machine Make a dist directory
        if: ${{ matrix.os == 'windows-latest' && ( env.compiler_style == 'mingw' ||  env.compiler_style == 'cygwin' ) }}
        working-directory: projects\plr
        run: |
          mkdir ${{ github.event.repository.name }}_${{ matrix.os }}_${{ matrix.pg }}_${{ matrix.Platform}}_${{ matrix.Configuration }}_${{ matrix.rversion }}_${{ matrix.Compiler}}_dist

      - name: Windows Self Compressing Artifacts
        if: ${{ matrix.os == 'windows-latest' && ( env.compiler_style == 'mingw' ||  env.compiler_style == 'cygwin' ) }}
        working-directory: projects\plr
        run: |
          echo Archiving

          ${env:gitrevshort}   = "${{ env.gitrevshort }}"
          #
          ${env:pg}            = "${{ matrix.pg }}"
          ${env:Configuration} = "${{ matrix.Configuration }}
          ${env:Platform}      = "${{ matrix.Platform }}"
          ${env:os}            = "${{ matrix.os }}"
          ${env:rversion}      = "${{ matrix.rversion }}"
          ${env:compiler}      = "${{ matrix.compiler }}"
          #
          ${env:compiler_style} = "${{ env.compiler_style }}"
          ${env:bit}            = "${{ env.bit }}"
          ${env:R_HOME}         = "${{ env.R_HOME }}"
          ${env:R_ARCH}         = "${{ env.R_ARCH }}"
          ${env:pgsource}       = "${{ env.pgsource }}"
          
          Start-App "${{ env.bash }}" "-lc", "'/c/projects/plr/archive_script.sh'"
          
          ${env:pgroot}    = "${{ env.pgroot }}"
          ${env:rversion}  = "${{ env.rversion }}"
          ${env:pgversion} = "${{ env.pgversion }}"
      #
      # Compress build for windows.  (Instead let 7z in "Windows Self Compressing Artifacts" compress using 7z)
      # https://github.com/AndreMikulec/testapp/blob/f13d725a9fcfa5daff3d25ff00f9899b417cbc5d/.github/workflows/build_everything.yml#L207

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: plr-${{ env.gitrevshort }}-${{ matrix.os }}-pg${{ env.pgversion }}-R${{ matrix.rversion }}-${{ matrix.Platform }}-${{ matrix.Configuration }}-${{ matrix.compiler}}
          path: |
            plr-${{ env.gitrevshort }}-${{ matrix.os }}-pg${{ env.pgversion }}-R${{ matrix.rversion }}-${{ matrix.Platform }}-${{ matrix.Configuration }}-${{ matrix.compiler}}.7z

      # required permissions for the action specified (which is contents: write)
      - name: Release
        if: github.ref_type == 'tag'
        uses: ncipollo/release-action@v1.12.0
        with:
          allowUpdates: true
          replacesArtifacts: true
          commit: ${{ env.GITHUB_SHA }}
          tag: ${{ env.USER_GITHUB_REF_NAME }}
          artifacts: "plr-${{ env.gitrevshort }}-${{ matrix.os }}-pg${{ env.pgversion }}-R${{ matrix.rversion }}-${{ matrix.Platform }}-${{ matrix.Configuration }}-${{ matrix.compiler}}.7z"
          token: ${{ secrets.PLR_ACTIONS_CREATE_RELEASE_REPO_SECRET }}
        env:
          USER_GITHUB_SHA: ${{ github.sha }}
          USER_GITHUB_REF_NAME: ${{ github.ref_name }}

