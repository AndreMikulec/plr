# This is a basic workflow to help you get started with Actions

name: plr daily
run-name: plr daily - ${{ github.event.head_commit.message }}

on: [push, pull_request, workflow_dispatch]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '30 1 * * *'
jobs:
  master:
    # SEEN JUL 2024
    # Ubuntu 22.04	ubuntu-latest
    # https://github.com/actions/runner-images
    # jammy (22.04, LTS)
    # https://wiki.postgresql.org/wiki/Apt
    # https://apt.postgresql.org/pub/repos/apt/dists/
    runs-on: ubuntu-latest
    steps:
      - name: Echo site details
        run: echo building master

      - name: Checkout code
        uses: actions/checkout@v4

      - name: checkout postgres
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq r-base-dev acl bison flex libssl-dev
          sudo R --version
          sudo /etc/init.d/postgresql stop
          sudo apt-get remove --purge postgresql\*
          sudo rm -rf /etc/postgresql /var/lib/postgresql
          git clone --depth=1 https://github.com/postgres/postgres.git
          pushd postgres
          ./configure
          make
          sudo make install
          export PATH=/usr/local/pgsql/bin:$PATH
          initdb -D data
          pg_ctl -D data -l logfile start
          popd

      - name: Script
        run: |
          export USE_PGXS=1
          export PATH=/usr/local/pgsql/bin:$PATH
          SHLIB_LINK=-lgcov PG_CPPFLAGS="-fprofile-arcs -ftest-coverage -O0" make
          # USE_PGXS=1 is not required in Travis, and it is required in Github Actions
          sudo USE_PGXS=1 PATH=/usr/local/pgsql/bin:$PATH make install
          psql --version
          make installcheck || (cat regression.diffs && false)
        env:
          USE_PGXS: 1

  REL_17_:
    # SEEN JUL 2024
    # Ubuntu 22.04	ubuntu-latest
    # https://github.com/actions/runner-images
    # jammy (22.04, LTS)
    # https://wiki.postgresql.org/wiki/Apt
    # https://apt.postgresql.org/pub/repos/apt/dists/
    runs-on: ubuntu-latest
    steps:
      - name: Echo site details
        run: echo building master

      - name: Checkout code
        uses: actions/checkout@v4

      - name: checkout postgres
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq r-base-dev acl bison flex libssl-dev
          sudo R --version
          sudo /etc/init.d/postgresql stop
          sudo apt-get remove --purge postgresql\*
          sudo rm -rf /etc/postgresql /var/lib/postgresql
          export RET=$(git ls-remote --tags https://github.com/postgres/postgres.git | cut -c 52- | grep -c 'REL_17_[0-9]')
          if [ "${RET}" -gt "0" ]
          then
            echo -n "Release(s) are found.  Taking the last Release . . . "
            export GITTAG=$(git ls-remote --tags https://github.com/postgres/postgres.git | cut -c 52- | grep -e 'REL_17_[0-9]' | tail -n 1)
          else
            echo "Release(s) are not found.  Trying Release Candidates."
            export RET=$(git ls-remote --tags https://github.com/postgres/postgres.git | cut -c 52- | grep -c 'REL_17_RC[0-9]')
            if [ "${RET}" -gt "0" ]
            then
              echo -n "Release Candidate(s) are found.  Taking the last Release Candidate . . . "
              export GITTAG=$(git ls-remote --tags https://github.com/postgres/postgres.git | cut -c 52- | grep -e 'REL_17_RC[0-9]' | tail -n 1)
            else
              echo "Release Candidate(s) are not found. Trying Betas."
              export RET=$(git ls-remote --tags https://github.com/postgres/postgres.git | cut -c 52- | grep -c 'REL_17_BETA[0-9]')
              if [ "${RET}" -gt "0" ]
              then
                echo -n "Beta(s) are found. Taking the last Beta . . . "
                export GITTAG=$(git ls-remote --tags https://github.com/postgres/postgres.git | cut -c 52- | grep -e 'REL_17_BETA[0-9]' | tail -n 1)
              else
                echo "Beta(s) are not found."
              fi
            fi
          fi
          git clone --branch $GITTAG --depth=1 https://github.com/postgres/postgres.git
          git clone --depth=1 https://github.com/postgres/postgres.git
          pushd postgres
          ./configure
          make
          sudo make install
          export PATH=/usr/local/pgsql/bin:$PATH
          initdb -D data
          pg_ctl -D data -l logfile start
          popd

      - name: Script
        run: |
          export USE_PGXS=1
          export PATH=/usr/local/pgsql/bin:$PATH
          SHLIB_LINK=-lgcov PG_CPPFLAGS="-fprofile-arcs -ftest-coverage -O0" make
          # USE_PGXS=1 is not required in Travis, and it is required in Github Actions
          sudo USE_PGXS=1 PATH=/usr/local/pgsql/bin:$PATH make install
          psql --version
          make installcheck || (cat regression.diffs && false)
        env:
          USE_PGXS: 1
